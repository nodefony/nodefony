name:                    nodefony
on:                      [push]
jobs:
  build-linux:
    runs-on:             ${{ matrix.os }}
    name:                Nodefony Build Linux
    strategy:
      matrix:
        os:              [ubuntu-latest]
        node-version:    [16.x,18.x,20.x]
      fail-fast:         false
    steps:
    - name:              Use latest NPM
      run:               sudo npm i -g --force npm
    - name:              Use latest Yarn
      run:               sudo npm i -g yarn
    - uses:              webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    - uses:              actions/checkout@v3
    - name:              Use Node.js ${{ matrix.node-version }}
      uses:              actions/setup-node@v3
      with:
        node-version:    ${{ matrix.node-version }}
    # ACTION LOCAL TEST
    #- name:             Hello world action step
    #  id:               hello
    #  uses:             ./tools/actions/hello # Uses an action in the root directory
    #  with:
    #    who-to-greet:   'Nodefony Test Action'
    # Use the output from the `hello` step
    #- name:             Get the output time
    #  shell:            bash
    #  run:              echo "The time was ${{ steps.hello.outputs.time }}"
    - name:              Install Nodefony
      shell:             bash
      run:               |
        npm -g install pnpm
        npm cache clean --force
        yarn config set ignore-engines true
        yarn config set ignore-platform true
        npm install --no-audit --force --legacy-peer-deps
        npm install --no-audit --force --legacy-peer-deps ./src/nodefony
        cd ./src/nodefony
        pwd
        yarn link
        cd -
        pwd
        yarn link nodefony
        yarn
      env:
        CI:              true
    - name:              Deploy Project (prod-deploy)
      shell:             bash
      run:               |
        npm run prod-deploy
      env:
        CI:              true
    - name:              Start Project
      shell:             bash
      run:               |
        npm start
      env:
        CI:              true
    - name:              Test Project
      shell:             bash
      run:               |
        npm test
      env:
        CI:              true
    services:
      nginx:
        image:           nginx
        ports:
          - 8080:80
        env:
          NGINX_PORT:    80
      redis:
        image:           redis
        ports:
          - 6379/tcp

  build-osx:
    runs-on:             ${{ matrix.os }}
    name:                Nodefony Build MacOS
    strategy:
      matrix:
        os:              [macOS-latest]
        node-version:    [16.x,18.x,20.x]
      fail-fast:         false
    steps:
    - name:              Use latest NPM
      run:               npm i -g --force npm
    - name:              Use latest Yarn
      run:               npm i -g yarn
    - uses:              webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    - uses:              actions/checkout@v3
    - name:              Use Node.js ${{ matrix.node-version }}
      uses:              actions/setup-node@v3
      with:
        node-version:    ${{ matrix.node-version }}
    # ACTION LOCAL TEST
    #- name:             Hello world action step
    #  id:               hello
    #  uses:             ./tools/actions/hello # Uses an action in the root directory
    #  with:
    #    who-to-greet:   'Nodefony Test Action'
    # Use the output from the `hello` step
    #- name:             Get the output time
    #  shell:            bash
    #  run:              echo "The time was ${{ steps.hello.outputs.time }}"
    - name:              Install Nodefony
      shell:             bash
      run:               |
        npm -g install pnpm
        npm cache clean --force
        yarn config set ignore-engines true
        yarn config set ignore-platform true
        npm install --no-audit --force --legacy-peer-deps
        npm install --no-audit --force --legacy-peer-deps ./src/nodefony
        cd ./src/nodefony
        pwd
        yarn link
        cd -
        pwd
        yarn link nodefony
        yarn
      env:
        CI:              true
    - name:              Deploy Project (prod-deploy)
      shell:             bash
      run:               |
        npm run prod-deploy
      env:
        CI:              true
    - name:              Start Project
      shell:             bash
      run:               |
        npm start
      env:
        CI:              true
    - name:              Test Project
      shell:             bash
      run:               |
        npm test
      env:
        CI:              true

  build-windows:
    runs-on:             ${{ matrix.os }}
    name:                Nodefony Build Windows
    strategy:
      matrix:
        os:              [windows-latest]
        node-version:    [16.x,18.x,20.x]
      fail-fast:         false
    steps:
    - name:              Use latest NPM on windows
      run:               npm i -g --force npm
    - name:              Use latest Yarn
      run:               npm i -g yarn
    - name:              Use clean Yarn cache on windows
      run:               yarn cache clean
    - uses:              actions/checkout@v3
    - name:              Use Node.js ${{ matrix.node-version }}
      uses:              actions/setup-node@v3
      with:
        node-version:    ${{ matrix.node-version }}
    # ACTION LOCAL TEST
    #- name:             Hello world action step
    #  id:               hello
    #  uses:             ./tools/actions/hello # Uses an action in the root directory
    #  with:
    #    who-to-greet:   'Nodefony Test Action'
    # Use the output from the `hello` step
    #- name:             Get the output time
    #  shell:            bash
    #  run:              echo "The time was ${{ steps.hello.outputs.time }}"
    - name:              Generate Certificates
      shell:             bash
      run:               |
        echo $PATH
        pwd
        openssl version -d
        npm rum certificates --if-present
    - name:              Install Nodefony
      shell:             bash
      run:               |
        npm -g install pnpm
        npm cache clean --force
        yarn config set ignore-engines true
        yarn config set ignore-platform true
        npm install --no-audit --force --legacy-peer-deps
        npm install --no-audit --force --legacy-peer-deps ./src/nodefony
        cd ./src/nodefony
        pwd
        yarn link
        cd -
        pwd
        yarn link nodefony
        yarn
      env:
        CI:              true
    - name:              Deploy Project (prod-deploy)
      shell:             bash
      run:               |
        npm run prod-deploy
      env:
        CI:              true
    - name:              Start Project
      shell:             bash
      run:               |
        npm start
      env:
        CI:              true
    - name:              Test Project
      shell:             bash
      run:               |
        npm test
      env:
        CI:              true
