
// ADD TAG
$ git tag release01
$ git push origin release01


// REMOVE TAG :
$ git tag -d release01
$ git push origin :refs/tags/release01


// ADD REMOTE BRANCH
git push -u origin <branch_name>

// TRACK REMOTE BRANCH
$ git branch --track name origin/dev
$ git checkout -b dev --track  origin/dev


// track ignored file
$ git ls-files --ignored --exclude-standard
$ git update-index --assume-unchanged file


// SSH add key
$ eval "$(ssh-agent -s)"
$ ssh-add -K ~/.ssh/my_github_key/id_rsa

/*
 *	submodules
 *
 */
  // sync
 git submodule sync
 git submodule update --init --recursive

  // add submodules
git submodule add https://github.com/nodefony/nodefony-stage.git ./src/stage

  // rm submodules
git submodule deinit .
git rm --cached src/stage
// rm in .gitmodules
submodule "src/stage"]
        path = src/stage
        url = https://github.com/nodefony/nodefony-stage.git


/*
 *	CLONE GIT BARE
 *	on new server git
 */
$ git clone --bare git@olddomain:~/projet.git
$ git config remote.origin.url git@newdomain:~/projet.git


/*
 *	DELETE branch
 */
//local
git branch -d myBranch
//remote
git push origin --delete <branch_name>
//or
git push origin :<branch_name>

/*
 *	add github project
 */
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/nodefony/nodefony-project.git
git push -u origin master

/*
 *	Fusionner deux dépôts git
 */
# On clone les dépots
git clone projet1
git clone projet2
cd projet1

# On ajoute le projet2 comme source dans le projet1
git remote add projet2 ../projet2
git fetch projet2

# On liste les branches du dépôt 2
git branch -a

# On crée dans le dépôt 1 la branche à fusionner (par exemple master)
git branch projet2-master projet2/master

# On fusionne
git merge projet2-master
or
git merge --allow-unrelated-histories projet2-master


/**
*   ADD git branch PROMT BASH
**/
parse_git_branch() {
   git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}
export PS1="\u@\h \W\[\033[32m\]\$(parse_git_branch)\[\033[00m\] $ "

/**
*   REBASE Interactive
*   https://delicious-insights.com/fr/articles/bien-utiliser-git-merge-et-rebase/
**/
git rebase --interactive b8603aca
# change pick by edit
git commit -a --amend --no-edit
git rebase --continue
