#!/usr/bin/env node 
const asciify = require('asciify');
const cluster = require('cluster');	

var autoloader = null ;
// AUTOLOADER
try {
	autoloader = require("nodefony");
}catch(e){
	autoloader = require("./src/nodefony/core/autoloader");	
}
autoloader.load( path.resolve("./app/appKernel.js" ) );

/*
 *
 * NODEFONY FRAMEWORK START WITH PM2
 *
 *	PRODUCTION / DEVELOPEMENT
 *
 */
if ( process.env["MODE_START"] && process.env["MODE_START"] === "PM2"){

	var kernel = new nodefony.appKernel("SERVER", "prod", false, autoloader,{
		node_start:process.env["MODE_START"]
	});

	autoloader.setKernel(kernel);
	return kernel ;
}

/*
 *
 * NODEFONY FRAMEWORK START 
 *
 *	PRODUCTION
 *
 */
process.env["MODE_START"] = "NODEFONY" ;
if (cluster.isMaster) {
	
	asciify("      NODEFONY", {font:'standard'}, function(err, res){
		console.log('\033[31m'+res+'\033[0m');
	});

	var nbProc = require('os').cpus().length; 
	//var nbProc = 1; 
	for (var i=0 ; i<nbProc;i++){
		cluster.fork();
	}

	cluster.on('disconnect', function(worker) {
		console.error('disconnect!');
	});


	cluster.on('fork', function(worker) {
		worker.on('message', function(msg){
			var wid = worker.id ;
			Object.keys(cluster.workers).forEach(function(id) {
				if ( id != wid){
					//console.log("SEND FROM  "+ wid + " to " + id)
					cluster.workers[id].send(msg);		
				}
			});	
		});
	});

}else {
	const kernel = new nodefony.appKernel("SERVER", "prod", false, autoloader,{
		node_start:process.env["MODE_START"]	
	});
	autoloader.setKernel(kernel);
	return kernel ;
}








