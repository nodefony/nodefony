{{trans_default_domain("doc")}}

<div class="page-header">
  <h1><strong>CONTROLLERS</strong> </h1>
	<div class="alert alert-info" role="alert">
		<strong>
		CONTROLLERS Nodefony  </br> 
		</strong>
	</div>
	<p>
		<center>
			<img src="/documentationBundle/images/controller.png" />
		</center>
	</p>
</div>

<h2 > You can see here :</h2>

<p>
	<ul>
		<li><a href="#location">Location controllers</a></li>
		<li><a href="#file">File Controller</a></li>
		<li><a href="#action">Controller Actions</a></li>
		<li><a href="#data">Rendering Datas</a></li>
		<li><a href="#context">Request Context</a></li>
		<li><a href="#service">Services Container</a></li>
		<li><a href="#requestResponse">Request and Response</a></li>
		<li><a href="#logger">Controller Logger</a></li>
	</ul>
<p>

<h2 name="location" id="location">Location controllers  :</h2>

<div class="doc2">
	<p>
		You can find or add controllers in bundle repository under <code>controller</code> directory.

	</p>

	<pre>
$ ls -l src/bundles/nameBundle/

total 24
drwxr-xr-x  2 cci  staff    68 20 jui 11:07 Command
drwxr-xr-x  2 cci  staff    68 20 jui 11:07 Entity
drwxr-xr-x  6 cci  staff   204 22 jui 13:57 Resources
drwxr-xr-x  4 cci  staff   136  6 oct 11:17 <strong>controller</strong>
drwxr-xr-x  2 cci  staff    68 20 jui 11:07 core
drwxr-xr-x  5 cci  staff   170 22 sep 14:23 doc
-rwxr-xr-x  1 cci  staff  1751 22 sep 10:56 nameBundle.js
-rwxr-xr-x  1 cci  staff   195 22 sep 10:56 package.json
-rwxr-xr-x  1 cci  staff   706 22 sep 10:56 readme.md
drwxr-xr-x  2 cci  staff    68 20 jui 11:07 services

	</pre>
</div>


<h2 name="file" id="file"> File Controller   :<h2>
<h3>File Controller  :</h3>
<div class="doc3 ">

<p>
	The name of file must finish by <strong>'...Controller.js'</strong>  example : <code> name<strong>Controller.js</strong></code>
</p>

	<pre>
$ ls -l src/bundles/nameBundle/controller

total 32
-rwxr-xr-x  1 cci  staff  8210  6 oct 10:58 defaultController.js
-rw-r--r--  1 cci  staff  2521 29 sep 14:44 gitController.js
	</pre>


</div>

<h3>Autoloader  :</h3>
<div class="doc3 ">

<p>
	The core autoloader nodefony load all files in this directory which match with <strong>'...Controller.js'</strong> <br>
</p>


</div>

<h3>Interpreter  :</h3>
<div class="doc3 ">
<p>
	The core autoloader nodefony interpret the javascript code in an extended global context.<br>
	You can find namespace nodefony in the global context .
</p>
</div>


<h3>Class Controller  :</h3>
<div class="doc3 ">

<p>
	Nodefony core has a method <strong>registerController</strong> which must return class as a  Closure. <br>
</p>


	<pre>
nodefony.<strong>registerController</strong>("name", function(){
		/*
		 *	closure private space 
		 */
		var tab = [1,2,3,4];
		var myFuntion = function(){
			return tab ;
		}
		
		/*
		 *	Class controller name
		 *	 
		 */ 
		var <strong>myController</strong> = class myController extends nodefony.controller {
			/*
			 *	CONSTRUCTOR
			 */
			constructor (container, context){
				super(container, context);
			};
				
			/*
		 	*	Action controller
		 	*	( action render public  ) 
		 	*
		 	*/
			<strong>indexAction</strong>(){
				var kernel = this.get("kernel") ;
				var settings = kernel.settings ;
				var html = '&lt;html&gt;&lt;body&gt;Nodefony version : '+settings.system.version+'&lt;/body&gt;&lt;/html&gt;';
				return this.renderResponse(html);
			};
		};
		// RETURN  class
		return <strong>myController;</strong>
});
	</pre>

</div>

<h2 name="action" id="action">Controller Actions  :</h2>

<div class="doc2 ">
	<p>
		The nodefony core router find routes with pattern <code>'nameBundle:controller:<strong>action</strong>'</code> Example : demoBundle:default:index <br> 
		For the router find the controller's action functions.  <br>    
		The name of function must finish  by '...Action' <code>'indexAction'</code>
	</p>	
	<pre>
/*
 *	Action index in controller default  
 *
 */
index<strong>Action</strong> (){
	...
};
	</pre>
	
</div>


<h2 name="data" id="data">Rendering Datas :</h2>
<div class="doc2 ">
	
	There are 2 differents ways to render datas (or templates)  in the actions of the controllers

	<div  class="panel panel-info">
		<div class="panel-heading"><strong>Synchronous rendering</strong>  </div>
		<div class="panel-body ">
			<ul class="nav nav-tabs">
  				<li role="presentation" class="active"><a data-target="#renderingS" data-toggle="tab">rendering</a></li>
  				<li role="presentation" ><a data-target="#examples1" data-toggle="tab">Examples</a></li>
  				<li role="presentation" ><a data-target="#" data-toggle="tab"></a></li>
			</ul>	
			<div class="tab-content ">
				<div id="renderingS" class="tab-pane active">
					<br>
					<div class="alert alert-warning" role="alert">
						For Synchrone data rendering ,  The controller's Action  method <strong> must return a Response Class , Promise Class or  Object </strong>
					</div>
					<p>
						The controller give somme tools to render Synchrone data : 
						<ul>
							<li> renderResponse </li>
							<li> render </li>
							<li> renderJson </li>
						</ul>
					</p>
						
				</div>
				<div id="examples1" class="tab-pane">
					<br>
					<pre>
/*
 *	RENDER RAW DATA WITH renderResponse
 */
indexAction (){
	var kernel = this.get("kernel") ;
	var settings = kernel.settings ;
	var html = '&lt;html&gt;&lt;body&gt;Nodefony version : '+settings.system.version+'&lt;/body&gt;&lt;/html&gt;';
	<strong>return this.renderResponse(html);</strong>
};
					</pre>


					<pre>
/*
 *	RENDER TWIG TEMPLATE with render
 */
indexAction (){
	var kernel = this.get("kernel") ;
	<strong>return this.render("demoBundle:Default:index.html.twig",{
		settings:kernel.settings	
	});</strong>
	
};
					</pre>

					<pre>
/*
 *	RENDER TWIG TEMPLATE AUTO with object 
 */
indexAction (){
	var kernel = this.get("kernel") ;
	<strong>return {
		settings:kernel.settings	
	}</strong>
};
					</pre>
	
				</div>
				<div id="" class="tab-pane ">
					<br>
					
				</div>
			</div>
		</div>
	</div>


	<div  class="panel panel-info">
		<div class="panel-heading"><strong>Asynchronous rendering</strong>  </div>
		<div class="panel-body ">
			<ul class="nav nav-tabs">
  				<li role="presentation" class="active"><a data-target="#renderingA" data-toggle="tab">rendering</a></li>
  				<li role="presentation" ><a data-target="#examples2" data-toggle="tab">Examples</a></li>
  				<li role="presentation" ><a data-target="#" data-toggle="tab"></a></li>
			</ul>	
			<div class="tab-content ">
				<div id="renderingA" class="tab-pane active">
					<br>
					<p>
						<div class="alert alert-warning" role="alert">
							For Asynchrone data rendering ,  The controller's Action  method <strong> must  not return a value </strong>
						</div>
						The controller give somme tools to render Asynchrone data : 
							<ul>
								<li> renderResponse </li>
								<li> renderAsync </li>
								<li> renderJsonAsync </li>
							</ul>
						The  framework  wait an event of other entity of framework ( orm database , syscall )
						
					</p>
				</div>
				<div id="examples2" class="tab-pane">
					<br>
					
					<pre>
/*
 *	RENDER RAW DATA
 */
rawResponseAsyncAction(){
	var kernel = this.get("kernel") ;
	var settings = kernel.settings ;

	// SYSCALL async 
	var childHost =  <strong>exec</strong>('hostname', (error, stdout, stderr) => {
		var hostname = stdout ;	

		var content = '&lt;xml&gt;'&lt;nodefony&gt;\
			'&lt;kernel name="'+settings.name+'" version="'+settings.system.version+'"&gt;\
			'&lt;server type="HTTP" port="'+settings.system.httpPort+'"&gt;'&lt;/server&gt;\
			'&lt;server type="HTTPS" port="'+settings.system.httpsPort+'"&gt;'&lt;/server&gt;\
			'&lt;hostname&gt;'+hostname+'</hostname>\
			'&lt;/kernel&gt;\
			'&lt;/nodefony&gt;'&lt;/xml&gt;';

		<strong>this.renderResponse</strong>(content, 200 , {
			"content-type" :"Application/xml"
		})
	});

	<strong>return null;</strong>
};

					</pre>
	
				</div>
				<div id="" class="tab-pane ">
					<br>
					
				</div>
			</div>
		</div>
	</div>
</div>


<h2 name="context" id="context">Request Context  :</h2>
<div class="doc2 ">

	<div  class="panel panel-info">
		<div class="panel-heading"><strong>Nodefony Context</strong>  </div>
		<div class="panel-body ">
			<ul class="nav nav-tabs">
  				<li role="presentation" class="active"><a data-target="#context1" data-toggle="tab">CONTEXT</a></li>
  				<li role="presentation" ><a data-target="#http" data-toggle="tab">HTTP</a></li>
  				<li role="presentation" ><a data-target="#websoket" data-toggle="tab">WEBSOCKET</a></li>
			</ul>	
			<div class="tab-content ">
				<div id="context1" class="tab-pane active">
					<br>
					<p>
					In controller the actions can have  two execution contexts. <br>
					When a request comes,  the nodefony core instantiates a  context Class ( http or websocket )	
					</p>
					<pre>
/*
*	 Detect  request type in action
*
*/
indexAction (){

	// two methods to detect the  request type by context or by method 

	// FIRST with getContext
	<strong>var context = this.getContext();</strong>
	switch( context.type ){
		<strong>case "HTTP" :</strong>
			// HTTP CONTEXT
		break;
		<strong>case "HTTPS" :</strong>
			// HTTP CONTEXT
		break;
		<strong>case "WEBSOCKET" :</strong>
			// WEBSOCKET CONTEXT
		break;
		<strong>case "WEBSOCKET SECURE" :</strong>
			// WEBSOCKET CONTEXT
		break;
		default :
			throw new Error(" Bad Context")
	}

	// SECOND with getMethod 
	<strong>var method = this.getMethod();</strong>
	switch( method ){
		<strong>case "GET" :</strong>
			// HTTP CONTEXT
		break;
		<strong>case "POST" :</strong>
			// HTTP CONTEXT
		break;
		<strong>case "DELETE" :</strong>
			// HTTP CONTEXT
		break;
		<strong>case "WEBSOCKET" :</strong>
			// WEBSOCKET CONTEXT
		break;
		default :
			throw new Error(" METHOD NOT ALLOWED")
	}
};
					</pre>	
				</div>

				<div id="http" class="tab-pane">
					<br>
					<p>
					<h3>  CONTEXT  <a>HTTP / HTTPS   :</a></h3>

					</p>
					<pre>
//  DUMP HTTPS CONTEXT

var context = this.getContext();
console.log(context);

<strong>Http {</strong>
type: 'HTTPS',
container: [Object],
notificationsCenter: [Object],
resolver: [Object],
request: [Object],
response: [Object],
session: [Object],
sessionService: [Object],
sessionAutoStart: 'firewall',
cookies: [Object],
isAjax: false,
secureArea: null,
showDebugBar: true,
kernel: [Object],
autoloadCache: [Object],
kernelHttp: [Object],
domain: 'nodefony.com',
validDomain: true,
security: [Object],
user: [Object],
url: 'https://nodefony.com:5152/demo/json',
remoteAddress: '192.168.100.71',
extendTwig: [Object],
profiling: [Object] 
<strong>}</strong>
					</pre>	
				</div>
				<div id="websoket" class="tab-pane ">
				<br>
					<p>
					<h3> CONTEXT  <a>WEBSOCKET / WEBSOCKET SECURE </a> :</h3>
					</p>
					<pre>
// DUMP WEBSOCKET SECURE CONTEXT

var context = this.getContext();
console.log(context);

<strong>websocket {</strong>
type: 'WEBSOCKET SECURE',
container: [Object],
kernel: [Object],
autoloadCache: [Object],
kernelHttp: [Object],
request: [Object],
origin: 'https://nodefony.com:5152',
connection: [Object],
response: [Object],
originUrl: [Object],
secureArea: null,
cookies: [Object],
domain: 'nodefony.com',
validDomain: true,
session: [Object],
sessionService: [Object],
sessionAutoStart: 'firewall',
security: [Object],
user: [Object],
url: '/demo/websoket',
remoteAdress: '192.168.100.71',
resolver: [Object],
notificationsCenter: [Object],
extendTwig: [Object],
profiling: [Object] 
<strong>}</strong>
					</pre>
				</div>
			</div>
		</div>
	</div>
</div>

<h2 name="service" id="service">Services Container  : </h2>
<div class="doc2 ">

	<div  class="panel panel-info">
		<div class="panel-heading"><strong>Controller Services Container</strong>  </div>
		<div class="panel-body ">
			<ul class="nav nav-tabs">
  				<li role="presentation" class="active"><a data-target="#container" data-toggle="tab">Container</a></li>
  				<li role="presentation" ><a data-target="#services" data-toggle="tab">Services</a></li>
  				<li role="presentation" ><a data-target="#paramater" data-toggle="tab">Parameters</a></li>
			</ul>	
			<div class="tab-content ">
				<div id="container" class="tab-pane active">
					<br>
					<p>
						<div class="alert alert-warning" role="alert">
						Nodefony Context  clone the Kernel Service Container ( scope ) </br>
						</div>
					</p>
					<p>
						You can find all services in controller </br>
						The Base controller give somme method to manage services container
						<ul>
							<li> this.get() </li>
							<li> this.set() </li>
							<li> this.getParameters() </li>
							<li> this.setParameters() </li>
						</ul>
					</p>
						
				</div>
				<div id="services" class="tab-pane">
					<br>
					<p>
					
					</p>
					<pre>
// GET SETTINGS services HTTPS SERVER
var settingsHttps =  <strong>this.get</strong>("httpsServer").settings ;

// GET I18n services 
var translateService = <strong>this.get</strong>("translation");

// GET sessions services 
var sessionsService = <strong>this.get</strong>("sessions");	
					</pre>	
				</div>
				<div id="paramater" class="tab-pane ">
					<br>
					<p>
					</p>
					<pre>
// get  asseticBundle globals settings
this.getParameters("bundles.assetic")

// LOG  
{ 
	name: 'asseticBundle',
	locale: 'en_en',
	version: '1.0',
	less: { optimization: 0, compress: true, cache: true, async: false },
	coffescript: null,
	CDN: { stylesheets: null, javascripts: null } 
}
					</pre>
				</div>
			</div>
		</div>
	</div>


	
</div>


<h2 name="requestResponse" id="requestResponse">Request and Response Object:</h2>
<div class="doc2 ">

<p>
</p>

</div>

<h3> Request :</h3>
<div class="doc3 ">

	<div  class="panel panel-info">
		<div class="panel-heading"><strong>Request</strong>  </div>
		<div class="panel-body ">
			<ul class="nav nav-tabs">
  				<li role="presentation" class="active"><a data-target="#request" data-toggle="tab">request</a></li>
  				<li role="presentation" ><a data-target="#paramater1" data-toggle="tab">Parameters</a></li>
  				<li role="presentation" ><a data-target="#" data-toggle="tab"></a></li>
			</ul>	
			<div class="tab-content ">
				<div id="request" class="tab-pane active">
					<br>
					<p>
					
					</p>
					<pre>
//  DUMP Request 

var resquest = this.getRequest();
console.log(resquest);

<strong>Request {</strong>
  container: [Object],
  request: [Object],
  headers: [Object],
  host: 'nodefony.com:5152',
  hostname: 'nodefony.com',
  sUrl: 'https://nodefony.com:5152/demo/json',
  url: [Object],
  queryPost: {},
  queryFile: {},
  queryGet: {},
  query: {},
  method: 'GET',
  rawContentType: {},
  contentType: null,
  charset: 'utf8',
  domain: 'nodefony.com',
  remoteAdress: '192.168.100.71',
  data: [],
  dataSize: 0,
  body: &lt;Buffer&gt;
<strong>}</strong>
					</pre>	
				</div>
				<div id="paramater1" class="tab-pane">
					<br>
					<h4>Query String :</h4>
						<pre>
// Get query string from container service : 
var queryString  = this.getParameters("query.get");

// Get query string from Class request 
var request = this.getRequest();
var queryString = request.queryGet ;
						</pre>
					<h4>Post Data :</h4>
						<pre>
// Get Post data from container service :
var post = this.getParameters("query.post");

// Get Post Data from Class request
var request = this.getRequest();
var postData = request.queryPost ;
						</pre>
					<h4>Files Data : ( upload )</h4> 
						<pre>
// Get Files data from container service :
var queryFile = this.getParameters("query.files");

// Get Files data  from Class request
var request = this.getRequest();
var queryFile = request.queryFile ;
						</pre>
					<h4>Query Data :</h4>
						<pre>
// Get query  from container service :
// query is extend object with all request datas (get, post, files)
var query = this.getParameters("query.request");

// Get query  from Class request
var request = this.getRequest();
var query = request.query ;
						</pre>
					<h4>Request Body  :</h4>
						<pre>
// Get body from Class Request 
var request = this.getRequest();
var body = request.body ;
						</pre>

					<h4>Request Cookies  :</h4>
						<div class="alert alert-warning" role="alert">
							You can find Cookies in context !!!  
						</div>
						<pre>
var context = this.getContext();
var cookies = context.cookies ;
						</pre>
	
				</div>
				<div id="" class="tab-pane ">
					<br>
					<p>
					
					</p>
					<pre>

					</pre>
				</div>
			</div>
		</div>
	</div>
	


	<div  class="panel panel-info">
		<div class="panel-heading"><strong>Response</strong>  </div>
		<div class="panel-body ">
			<ul class="nav nav-tabs">
  				<li role="presentation" class="active"><a data-target="#Response" data-toggle="tab">Response</a></li>
  				<li role="presentation" ><a data-target="#paramater2" data-toggle="tab">Parameters</a></li>
  				<li role="presentation" ><a data-target="#" data-toggle="tab"></a></li>
			</ul>	
			<div class="tab-content ">
				<div id="Response" class="tab-pane active">
					<br>
					<p>
					</p>
					<pre>
// DUMP Response 

var response = this.getResponse();
console.log(response);

<strong>Response {</strong>
  container: [Object],
  kernel: [Object],
  response: [Object],
  body: '',
  encoding: 'utf8',
  cookies: {},
  headers: {},
  ended: false,
  statusCode: 200,
  timeout: 40000 
<strong>}</strong>
					</pre>	
				</div>
				<div id="paramater2" class="tab-pane">
					<br>
					<h4>Response Set Timeout :</h4>
					<pre>
// response Timeout  when the time is up the framework makes the 408 response  
this.getResponse().<strong>setTimeout</strong>(5000)
					</pre>
					<h4>Response Set Headers :</h4>
					<pre>

// with setHeader	
this.getResponse().<strong>setHeader</strong>("Content-Type", "text/html; charset=utf-8");

//or with setHeaders
this.getResponse().<strong>setHeaders</strong>({
	"Content-Type" :"text/html; charset=utf-8"	
})
					</pre>
					<h4>Response Set StatusCode :</h4>
					<pre>

//
this.getResponse().<strong>setStatusCode</strong>(200, "OK") ;
					</pre>

					<h4>Response Add cookies :</h4>
					<pre>

var cookieDefaultSettings = {
	maxAge:24*60*60,
	path:"/",
	domain:null,
	secure:false,
	httpOnly:true,
};

var cookie = new nodefony.cookies.cookie("COOKIE NAME", "cookie value" , cookieDefaultSettings);
this.getResponse().<strong>addCookie</strong>(cookie);
					</pre>
	
				</div>
				<div id="" class="tab-pane ">
					<br>
					<p>
					
					</p>
					<pre>

					</pre>
				</div>
			</div>
		</div>
	</div>
</div>




<h2 name="logger" id="logger">Controller Logger  :</h2>
<div class="doc2 ">
	<pre>
indexAction (){
	var kernel = this.get("kernel") ;
	var settings = kernel.settings ;
	<strong>this.logger( "Nodefony version : Alpha" , "INFO");</strong>
	var html = '&lt;html&gt;&lt;body&gt;Nodefony version : '+settings.system.version+'&lt;/body&gt;&lt;/html&gt;';
	return this.renderResponse(html);
};

// IN TERMINAL 

Thu Oct 06 2016 15:49:10 <strong>INFO CONTROLER demo</strong>   : Nodefony version : Alpha

	</pre>
</div>


