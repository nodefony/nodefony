<div class="page-header">
  <h1>Nodefony start in <strong>production </strong>mode</h1>
</div>


<div class="doc2 jumbotron">

<p>
	<strong><h2>MODE  production </h2></strong>

	This mode can be useful if you want to check the proper functioning of the production environment <br> 
	we might call  <strong> pre-production </strong> mode
	<ul>	
		<li>  Use Clusters </li>
		<li>  Use caches control (views , controller ...) </li>
	</ul>
</p>

	<div class="alert alert-warning" role="alert">
		  !! Use <code>make asset</code> before run in this mode (See <a href="{{ path('documentation-section',{section:'installation', version:version, bundle:bundle,queryString:{'subsection':'makefile'} })}}#asset">Makefile documentaion</a> )     		
	</div>

</div>



<h2>Location :</h2>
<div class="doc2">
	<p>
		In nodefony Root directory you can find executable file <code>nodefony</code>
	</p>

	<pre>
$ ls -l

total 136
-rw-r--r--    1 cci  staff  22696 19 nov  2015 LICENSE
-rw-r--r--    1 cci  staff   2538  5 oct 11:19 Makefile
-rw-r--r--    1 cci  staff  12964 22 sep 11:42 README.md
drwxr-xr-x    9 cci  staff    306 22 sep 14:28 app
drwxr-xr-x    4 cci  staff    136 22 jui 13:57 bin
drwxr-xr-x    5 cci  staff    170  4 oct 10:16 config
-rwxr-xr-x    1 cci  staff    513 22 jui 13:57 console
lrwxr-xr-x    1 cci  staff     16 22 sep 11:37 doc 
drwxr-xr-x  291 cci  staff   9894  5 oct 12:42 node_modules
-rwxr-xr-x    1 cci  staff   1360 22 jui 13:57 <strong>nodefony</strong>
-rwxr-xr-x    1 cci  staff    552 22 jui 13:57 nodefony_dev
-rwxr-xr-x    1 cci  staff   1178  5 sep 11:14 nodefony_pm2
-rw-r--r--    1 cci  staff   1102  5 sep 11:14 package.json
drwxr-xr-x    7 cci  staff    238 22 jui 12:09 src
drwxr-xr-x    3 cci  staff    102  5 oct 12:40 tmp
drwxr-xr-x    7 cci  staff    238 22 jui 13:57 vendors
drwxr-xr-x   17 cci  staff    578  5 oct 12:42 web

	</pre>
</div>

<h2>Run :</h2>
<div class="doc2 ">

<p>
	To launch nodefony in production mode (clusters) here you can see 4 clusters:
</p>
	<pre>
$ ./nodefony
              _   _    ___    ____    _____   _____    ___    _   _  __   __
             | \ | |  / _ \  |  _ \  | ____| |  ___|  / _ \  | \ | | \ \ / /
             |  \| | | | | | | | | | |  _|   | |_    | | | | |  \| |  \ V / 
             | |\  | | |_| | | |_| | | |___  |  _|   | |_| | | |\  |   | |  
             |_| \_|  \___/  |____/  |_____| |_|      \___/  |_| \_|   |_|  
                                                                            

		      NODEFONY SERVER CLUSTER WORKER Version : Alpha PLATFORM : darwin  PROCESS PID : 79039
		      NODEFONY SERVER CLUSTER WORKER Version : Alpha PLATFORM : darwin  PROCESS PID : 79040
		      NODEFONY SERVER CLUSTER WORKER Version : Alpha PLATFORM : darwin  PROCESS PID : 79041
		      NODEFONY SERVER CLUSTER WORKER Version : Alpha PLATFORM : darwin  PROCESS PID : 79042
	</pre>
</div>

<h2>Stop :</h2>
<div class="doc2 ">

<p>
	To stop nodefony in production mode :
</p>
	<pre>
$ &lt;ctrl-c&gt; 

 
	</pre>
</div>




<h2>Script in detail : </h2>
<div class="doc2 ">

	<pre>
#!/usr/bin/env node --no-warnings --no-deprecation

var cluster = require('cluster');	


// AUTOLOADER 
var autoloader = require("./vendors/nodefony/core/autoloader");
autoloader.load("./app/appKernel.js");


/*
 *
 * NODEFONY FRAMEWORK START 
 *
 *	PRODUCTION
 *
 */
process.env["MODE_START"] = "NODEFONY" ;
if (cluster.isMaster) {
	
	require('asciify')("      NODEFONY", {font:'standard'}, function(err, res){
		console.log('\033[31m'+res+'\033[0m');
	});

	var nbProc = require('os').cpus().length; 
	for (var i = 0 ; i < nbProc; i++){
		cluster.fork();
	}

	cluster.on('disconnect', function(worker) {
		console.error('disconnect!');
	});


	cluster.on('fork', function(worker) {
		worker.on('message', function(msg){
			var wid = worker.id ;
			Object.keys(cluster.workers).forEach(function(id) {
				if ( id != wid){
					//console.log("SEND FROM  "+ wid + " to " + id)
					cluster.workers[id].send(msg);		
				}
			});	
		});
	});
	

}else {
	<strong>return new nodefony.appKernel("SERVER", "prod", false, autoloader,{
		node_start:process.env["MODE_START"]	
	});</strong>
}

	</pre>

</div>

