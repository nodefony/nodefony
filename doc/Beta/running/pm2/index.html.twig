<div class="page-header">
  <h1>Nodefony start in <strong>PM2 Management </strong>mode</h1>
</div>


<div class="doc2 jumbotron">

<p>
	<strong><h2>MODE  PM2 Management </h2></strong>

	This mode is the good  way  to deploy Application in prodution  <br> 
	<ul>	
		<li> Build  assetics and cache </li>
		<li> Use nodefony in clusters  </li>
		<li> Detach process from terminal </li>
	</ul>
</p>


</div>

<h3>PM2     <a href="http://pm2.keymetrics.io/">pm2.keymetrics.io</a> </h3>

<h3>Configration PM2 in Nodefony      <a href="{{ path('documentation-section',{section:'configurations', version:version, bundle:bundle, queryString:{'subsection':'framework'} })}}#pm2">PM2 Configuration </a> </h3>




<h2>Location :</h2>
<div class="doc2">
	<p>
		In nodefony Root directory you can find executable file <code>nodefony_pm2</code>
	</p>

	<pre>
$ ls -l

total 136
-rw-r--r--    1 cci  staff  22696 19 nov  2015 LICENSE
-rw-r--r--    1 cci  staff   2538  5 oct 11:19 Makefile
-rw-r--r--    1 cci  staff  12964 22 sep 11:42 README.md
drwxr-xr-x    9 cci  staff    306 22 sep 14:28 app
drwxr-xr-x    4 cci  staff    136 22 jui 13:57 bin
drwxr-xr-x    5 cci  staff    170  4 oct 10:16 config
-rwxr-xr-x    1 cci  staff    513 22 jui 13:57 console
lrwxr-xr-x    1 cci  staff     16 22 sep 11:37 doc 
drwxr-xr-x  291 cci  staff   9894  5 oct 12:42 node_modules
-rwxr-xr-x    1 cci  staff   1360 22 jui 13:57 nodefony
-rwxr-xr-x    1 cci  staff    552 22 jui 13:57 nodefony_dev
-rwxr-xr-x    1 cci  staff   1178  5 sep 11:14 <strong>nodefony_pm2</strong>
-rw-r--r--    1 cci  staff   1102  5 sep 11:14 package.json
drwxr-xr-x    7 cci  staff    238 22 jui 12:09 src
drwxr-xr-x    3 cci  staff    102  5 oct 12:40 tmp
drwxr-xr-x    7 cci  staff    238 22 jui 13:57 vendors
drwxr-xr-x   17 cci  staff    578  5 oct 12:42 web

	</pre>
</div>

<h2>Run :</h2>
<div class="doc2 ">

<p>
	<div class="alert alert-warning" role="alert">
		 !! Use make to launch nodefony in PM2 Management   		
	</div>
	To launch nodefony in PM2 Management mode :
</p>
	<pre>
$ make start
 

              _   _    ___    ____    _____   _____    ___    _   _  __   __
             | \ | |  / _ \  |  _ \  | ____| |  ___|  / _ \  | \ | | \ \ / /
             |  \| | | | | | | | | | |  _|   | |_    | | | | |  \| |  \ V / 
             | |\  | | |_| | | |_| | | |___  |  _|   | |_| | | |\  |   | |  
             |_| \_|  \___/  |____/  |_____| |_|      \___/  |_| \_|   |_|  
                                                                            

2016-10-05 16:05:25: Launching in no daemon mode
2016-10-05 16:05:25: Starting execution sequence in -cluster mode- for app name:nodefony id:0
2016-10-05 16:05:26: App name:nodefony id:0 online
2016-10-05 16:05:26: Starting execution sequence in -cluster mode- for app name:nodefony id:1
2016-10-05 16:05:26: App name:nodefony id:1 online
2016-10-05 16:05:26: Starting execution sequence in -cluster mode- for app name:nodefony id:2
2016-10-05 16:05:26: App name:nodefony id:2 online
2016-10-05 16:05:26: Starting execution sequence in -cluster mode- for app name:nodefony id:3
2016-10-05 16:05:26: App name:nodefony id:3 online

	</pre>
</div>


<h2>Stop :</h2>
<div class="doc2 ">

<p>
	To stop nodefony in PM2 Management mode :
</p>
	<pre>
$ make stop
 
[PM2] Applying action stopProcessId on app [nodefony](ids: 0,1,2,3)
2016-10-05 16:07:34: Stopping app:nodefony id:0
2016-10-05 16:07:34: Stopping app:nodefony id:1
2016-10-05 16:07:34: Stopping app:nodefony id:2
2016-10-05 16:07:34: Stopping app:nodefony id:3
2016-10-05 16:07:34: App name:nodefony id:0 disconnected
2016-10-05 16:07:34: App name:nodefony id:2 disconnected
2016-10-05 16:07:34: App name:nodefony id:3 disconnected
2016-10-05 16:07:34: App [nodefony] with id [0] and pid [79304], exited with code [0] via signal [SIGINT]
2016-10-05 16:07:34: App name:nodefony id:1 disconnected
2016-10-05 16:07:34: App [nodefony] with id [1] and pid [79305], exited with code [0] via signal [SIGINT]
2016-10-05 16:07:35: App [nodefony] with id [2] and pid [79310], exited with code [0] via signal [SIGINT]
2016-10-05 16:07:35: App [nodefony] with id [3] and pid [79319], exited with code [0] via signal [SIGINT]
[PM2] [nodefony](0) ✓
[PM2] [nodefony](2) ✓
[PM2] [nodefony](3) ✓
[PM2] [nodefony](1) ✓
┌──────────┬────┬─────────┬─────┬─────────┬─────────┬────────┬─────┬────────┬──────────┐
│ App name │ id │ mode    │ pid │ status  │ restart │ uptime │ cpu │ mem    │ watching │
├──────────┼────┼─────────┼─────┼─────────┼─────────┼────────┼─────┼────────┼──────────┤
│ nodefony │ 0  │ cluster │ 0   │ stopped │ 0       │ 0      │ 0%  │ 0 B    │ disabled │
│ nodefony │ 1  │ cluster │ 0   │ stopped │ 0       │ 0      │ 0%  │ 0 B    │ disabled │
│ nodefony │ 2  │ cluster │ 0   │ stopped │ 0       │ 0      │ 0%  │ 0 B    │ disabled │
│ nodefony │ 3  │ cluster │ 0   │ stopped │ 0       │ 0      │ 0%  │ 0 B    │ disabled │
└──────────┴────┴─────────┴─────┴─────────┴─────────┴────────┴─────┴────────┴──────────┘
 Use `pm2 show <id|name>` to get more details about an app

	</pre>
</div>



<h2>Kill :</h2>
<div class="doc2 ">

<p>
	To kill nodefony in PM2 Management mode :

</p>
	<pre>
$ make kill
 

PM2] Stopping PM2...
[PM2] Applying action deleteProcessId on app [all](ids: 0,1,2,3)
2016-10-05 16:09:50: Stopping app:nodefony id:0
2016-10-05 16:09:50: Stopping app:nodefony id:1
2016-10-05 16:09:50: Stopping app:nodefony id:2
2016-10-05 16:09:50: Stopping app:nodefony id:3
2016-10-05 16:09:50: App name:nodefony id:0 disconnected
2016-10-05 16:09:50: App name:nodefony id:1 disconnected
2016-10-05 16:09:50: App name:nodefony id:2 disconnected
2016-10-05 16:09:50: App name:nodefony id:3 disconnected
2016-10-05 16:09:50: App [nodefony] with id [0] and pid [79949], exited with code [0] via signal [SIGINT]
2016-10-05 16:09:50: [HandleExit] PM2 is being killed, stopping restart procedure...
2016-10-05 16:09:50: App [nodefony] with id [1] and pid [79950], exited with code [0] via signal [SIGINT]
2016-10-05 16:09:50: [HandleExit] PM2 is being killed, stopping restart procedure...
2016-10-05 16:09:50: App [nodefony] with id [3] and pid [79952], exited with code [0] via signal [SIGINT]
2016-10-05 16:09:50: [HandleExit] PM2 is being killed, stopping restart procedure...
2016-10-05 16:09:50: Process with pid 79951 still not killed, retrying...
2016-10-05 16:09:50: App [nodefony] with id [2] and pid [79951], exited with code [0] via signal [SIGINT]
2016-10-05 16:09:50: [HandleExit] PM2 is being killed, stopping restart procedure...
[PM2] [nodefony](0) ✓
[PM2] [nodefony](1) ✓
[PM2] [nodefony](3) ✓
[PM2] [nodefony](2) ✓
[PM2] All processes have been stopped and deleted
2016-10-05 16:09:50: ===============================================================================
2016-10-05 16:09:50: --- Stopping PM2 --------------------------------------------------------------
2016-10-05 16:09:50: Time                 : Wed Oct 05 2016 16:09:50 GMT+0200 (CEST)
2016-10-05 16:09:50: ===============================================================================
2016-10-05 16:09:50: RPC closed
2016-10-05 16:09:50: PUB closed
2016-10-05 16:09:50: PM2 successfully stopped
[PM2] PM2 stopped


	</pre>
</div>



<h2>Script in detail : </h2>
<div class="doc2 ">

	<pre>
#!/usr/bin/env node --no-warnings --no-deprecation

var cluster = require('cluster');	


// AUTOLOADER 
var autoloader = require("./vendors/nodefony/core/autoloader");
autoloader.load("./app/appKernel.js");


/*
 *
 * NODEFONY FRAMEWORK START 
 *
 *	PRODUCTION
 *
 */
process.env["MODE_START"] = "NODEFONY" ;
if (cluster.isMaster) {
	
	require('asciify')("      NODEFONY", {font:'standard'}, function(err, res){
		console.log('\033[31m'+res+'\033[0m');
	});

	var nbProc = require('os').cpus().length; 
	for (var i = 0 ; i < nbProc; i++){
		cluster.fork();
	}

	cluster.on('disconnect', function(worker) {
		console.error('disconnect!');
	});


	cluster.on('fork', function(worker) {
		worker.on('message', function(msg){
			var wid = worker.id ;
			Object.keys(cluster.workers).forEach(function(id) {
				if ( id != wid){
					//console.log("SEND FROM  "+ wid + " to " + id)
					cluster.workers[id].send(msg);		
				}
			});	
		});
	});
	

}else {
	<strong>return new nodefony.appKernel("SERVER", "prod", false, autoloader,{
		node_start:process.env["MODE_START"]	
	});</strong>
}

	</pre>

</div>

