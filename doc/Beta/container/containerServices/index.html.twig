{{trans_default_domain("doc")}}

<div class="page-header">
  <h1><strong>{{ "containerServices" | trans() }} </strong> </h1>
	<p>
		The services container is an entity that can regitrer services and parameters .<br>
		its main interest is to have access to these resources from all over the code.<br>
		     
	</p>

	<p>
		<center>
			<img src="/documentationBundle/images/container.png" />
		</center>
	</p>
	<p>
		Services Container also manages scopes .</br>
		The notion of scope is a word recuperated from symfony2 . (deprecated in symfony3)</br>
		It can not be the right word (scope) in nodefony ! </br>
		In Nodefony a scope is a clone of container itself that you can change without alter this one</br>
	</p>

	<div class="alert alert-warning">
		Nodefony don't manage container like symfony2 framework but is inspired  <br> 	
	</div>
		
</div>
	
<h2 > You can see here :</h2>

<p>
	<ul>
		<li> <a href="#container"> Container</a></li>
		<li> <a href="#scope"> Scope Container </a></li>
		<li> <a href="#usage"> Nodefony Usage</a></li>
		
	</ul>
<p>


<h2  id="container" >Container :</h2>


<h3> Create Container </h3>
<div class="doc3">
	<p>
	</p>

	<pre>
#!/usr/local/bin/node  

// AUTOLOADER NODEFONY 
var autoloader = require("../vendors/nodefony/core/autoloader");

// CREATE INSTANCE OF CONTAINER 
var globalContainer  = new nodefony.Container() ;

// YOU CAN REGISTER INSTANCE HERSELF HAS SERVICES
globalContainer.set("global", globalContainer);	

<strong>console.log( globalContainer) ;</strong>

Container {
  scope: {},
  services: {},
  parameters: {} 
}
	</pre>

	<div class="alert alert-info">
		<p>  
			IN NODEFONY FRAMEWORK  :<br>
			The kernel  instanciate a <strong>global container </strong> who manage all services in application.<br>
			The <strong>Kernel </strong>  is declared as a service in <strong>global container </strong> .<br>  
			The <strong>global container </strong> itself is declared as a service by the kernel .<br>
		</p>  
	</div>	

</div>


<h3> Getter and Setter Service in Container </h3>
	<div class="doc3">
		<p>
			You can define an entity as service with <strong>set</strong> method of container (or scope)<br>
			<strong>It is important to add as a service only instance of class</strong></br>
			
			Example to set as a service  : <br>
			The container core have <strong>set</strong> method to register as service  
		</p>


		<pre>
#!/usr/local/bin/node  

// AUTOLOADER NODEFONY 
var autoloader = require("../vendors/nodefony/core/autoloader");

// CREATE INSTANCE OF CONTAINER 
var globalContainer  = new nodefony.Container() ;

// CREATE CLASSS TO ADD 
var myClass = class myClass {
	constructor(){
		this.settings = {
			foo:"bar"
		};
	};

	getConfig (){
		return this.settings ;
	};

};


// SET INSTANCE AS SERVICE TO CONTAINER 
<strong> globalContainer.set( "myService", new myClass() );</strong>


// GET SERVICE 
var service = globalContainer.get("myService") ;

// USE 
var config = service.getConfig();
console.log( config )
{ foo: 'bar' }
		</pre>

			
		<div class="alert alert-info">
			
			<p>  
			IN NODEFONY FRAMEWORK  : <br>
			Nodefony Kernel create an instance of container who registre all services existing in config (Global container). </br>
			The injection service read config file <code>service.xml</code> to add services in container 	 
			</p>  
		</div>	

	</div>

<h3> Getter and Setter Parameters in Container </h3>
	<div class="doc3">
		<p>
		</p>

		<pre>
#!/usr/local/bin/node  

// AUTOLOADER NODEFONY 
var autoloader = require("../vendors/nodefony/core/autoloader");

// CREATE INSTANCE OF CONTAINER 
var globalContainer  = new nodefony.Container() ;

// SET PARAMATERS IN CONTAINER
var myObect = {
	foo:"bar",
	bar:"foo"
}
globalContainer.setParameters( "config", myObect );

// GET PARAMETERS
var config = globalContainer.getParameters("config");

<strong>console.log(config);</strong>
{ foo: 'bar', bar: 'foo' } 


// GET PARAMETERS AS TREE
var foo = globalContainer.getParameters("config.foo");
<strong>console.log(foo);</strong>
bar
		</pre>
	</div>
	

<h2  id="scope">Scope :</h2>

<div class="doc2">
	<p>
		The scope of the container is a clever clone that allows you to add services without changing its parent container.</br>
		Also the scope inherits all the changes of the parent .  </br> 
		You can use scope like container (set , get ...) a scope is a container .
	</p>

	<h3> Create Scope </h3>
	<div class="doc3">
		<p>
		</p>

		<pre>
#!/usr/local/bin/node  

// AUTOLOADER NODEFONY 
var autoloader = require("../vendors/nodefony/core/autoloader");

// CREATE INSTANCE OF CONTAINER 
var globalContainer  = new nodefony.Container() ;
	  	
// CREATE SCOPE WITH NAME
globalContainer.<strong>addScope</strong>("request");

// enterScope CLONE  ;
var scope = globalContainer.enterScope("request");	

// now varaible scope is a clone of globalContainer 

<strong>console.log( scope ) ;</strong>
Scope {
  name: 'request',
  parent: 
   Container {
     protoService: [Function],
     protoParameters: [Function],
     scope: { request: [Object] },
     services: {},
     parameters: {} },
  mother: 
   bound Container {
     constructor: [Function: bound Container],
     logger: [Function: bound ],
     set: [Function: bound ],
     get: [Function: bound ],
     has: [Function: bound ],
     addScope: [Function: bound ],
     enterScope: [Function: bound ],
     leaveScope: [Function: bound ],
     setParameters: [Function: bound ],
     getParameters: [Function: bound ] },
  protoService: [Function],
  protoParameters: [Function],
  scope: { request: { 'rk0-neS1l': [Circular] } },
  services: {},
  parameters: {},
  id: 'rk0-neS1l' 
}

<strong>console.log( globalContainer ) ;</strong>
Container {
  scope: { request: { 'rk0-neS1l': [Object] } },
  services: {},
  parameters: {} 
}
		</pre>
		<div class="alert alert-info" >	
			IN NODEFONY FRAMEWORK  : <br>
			HttpKernel create a scope of  kernel container  (scope named : request )  and clone container on each request . </br>
		</div>

	</div>



	<h3> Leave Scope </h3>
	<div class="doc3">
		<p>
		</p>

		<pre>
// CREATE INSTANCE OF CONTAINER 
var globalContainer  = new nodefony.Container() ;
	  	
// CREATE SCOPE WITH NAME
globalContainer.addScope("request");

// enterScope CLONE1  ;
var scope1 = globalContainer.enterScope("request");	

// enterScope CLONE2
var scope2 = globalContainer.enterScope("request");

<strong>console.log( globalContainer )</strong>
Container {
  scope: { request: { HyxyhuGrke: [Object], ryZ1nOMryg: [Object] } },
  services: {},
  parameters: {} 
}

// to  detach scope1 to  container 
globalContainer.<strong>leaveScope</strong>(scope1) ;

<strong>console.log( globalContainer )</strong>
Container {
  scope: { request: { ryZ1nOMryg: [Object] } },
  services: {},
  parameters: {} 
}

// to  detach scope2 to  container 
globalContainer.<strong>leaveScope</strong>(scope2) ;

<strong>console.log( globalContainer )</strong>
Container {
  scope: { request: {} },
  services: {},
  parameters: {} 
}
// Now you can enterScope (clone) without call  addScope method
		</pre>

	</div>


	<h3> Remove Scope </h3>
	<div class="doc3">
		<p>
		</p>

		<pre>
// CREATE INSTANCE OF CONTAINER 
var globalContainer  = new nodefony.Container() ;
	  	
// CREATE SCOPE WITH NAME
globalContainer.addScope("request");

// enterScope CLONE1  ;
var scope1 = globalContainer.enterScope("request");	

// enterScope CLONE2
var scope2 = globalContainer.enterScope("request");

<strong>console.log( globalContainer )</strong>
Container {
  scope: { request: { rJlSnYzHkl: [Object], SJbS2YMBJg: [Object] } },
  services: {},
  parameters: {} 
}

// to  remove all scopes  to  container and delete  
globalContainer.<strong>removeScope</strong>("request") ;

<strong>console.log( globalContainer )</strong>
Container {
  scope: {},
  services: {},
  parameters: {} 
}
// now who must call addScope method to enterScope 
		</pre>

	</div>


</div>




<h2  id="usage">Nodefony Usage  :</h2>

<div class="doc2">
	<p>
	</p>
	


	<h3 name="" id="">Get service in  <strong>controller</strong>:</h3>

	<div class="doc3">
		<p>
			To use service you must pass by Services Container  :<br>
			Example to use service in action controller : <br>
			The controller core have <strong>get</strong> method to find a service  
		</p>

		<pre>
footerAction (){
	// get kernel service
	<strong>var kernel = this.get("kernel");</strong>
	var version =  kernel.settings.system.version ;

	// get translation  service
	<strong>var translateService = this.get("translation");</strong>
	var langs = translateService.getLangs();
	var locale = translateService.getLocale();

	...
}
		</pre>
	</div>

	<h3 name="" id="">Get Parameters in <strong>controller</strong>:</h3>

	<div class="doc3">
		<p>
			
			Example to get parameters in controller  : <br>
			The container core have <strong>getParamaters</strong> method to get paramaters  
		</p>

		<pre>
formAction (){

	// get bundle settings ( Paramaters inherits from global container  ) 
	this.httpSettings = <strong> this.getParameters</strong>("bundles.http");


	// get FORM DATA ( Paramaters added by scope (request)    )
	var query = <strong>this.getParameters</strong>("query");

	...
}
		</pre>
		<div class="alert alert-info">
			Warnning setter in  controller : <br>
			IN Controller the container is a scope ( request ) . The method <strong>set</strong> and  <strong>setParameters</strong> don't alter the  Global Container.<br>
			This scope have the lifetime of one request .  <br> 
			If you set service or parameters in scope,  the container parent is not affected !!! <br>
		</div>

	</div>
	
</div>


