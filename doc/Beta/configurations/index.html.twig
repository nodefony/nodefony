{{trans_default_domain("doc")}}


<div class="page-header">
	<h1><strong>NODEFONY CONFIGURATION</strong> </h1>
	<h2>Differents Nodefony configurations Files </h2>
	<div class="doc2" >
		Nodefony manage differents config files that you can find throughout your development. 
	</div>

	<h3> Global Configuration  : <code>config.yml</code> </h3>
	<h3> Routing Configuration  : <code>routing.yml</code> </h3>
	<h3> Services Configuration  : <code>services.xml</code> </h3>
	<h3> Firewall Configuration  : <code>security.yml</code> </h3>


	

	<div class="doc3">
			
		<div class="alert alert-danger" role="alert">
			<span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
			<span class="sr-only">Error:</span>
			In Developement mode :  Nodefony kernel Don't reload config.yml services.xml security.yml files,You must restart nodefony  !!!
		</div>
		<div class="alert alert-info" role="alert">
			<span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
			<span class="sr-only">Error:</span>
			In Developement mode :  routing.yml is auto-reloaded is you manage  WATCHERS in config.yml
			</br>
			<pre>
#
#  WATCHERS
#    
#    watchers Listen to changes, deletion, renaming of files and directories 
#    of different components
#       
#    For watch all components 
# 
#      watch:			true
#    or 
#      watch:
#        controller:		true
#        config:                true   	# only  routing.yml
#        views:			true
#        translations:          true
#
watch:				true
			</pre>
		</div>

	</div>

	<a href="{{ path('documentation-section',{section:'configurations', version:version, bundle:bundle, queryString:{'subsection':'application'} })}}"> <button type="button" class="btn btn-primary">Aplication Configuration</button></a>
	<a href="{{ path('documentation-section',{section:'configurations', version:version, bundle:bundle, queryString:{'subsection':'framework'} })}}"> <button type="button" class="btn btn-primary">Framework Configuration</button></a>
	<a href="{{ path('documentation-section',{section:'configurations', version:version, bundle:bundle, queryString:{'subsection':'bundle'} })}}"> <button type="button" class="btn btn-primary">Bundles Configuration</button></a>

</div>
		
	<h2> Global Configuration  : <code>config.yml</code> </h2>

	<div class="doc2">
		<p>
			This file manage the global paramaters of an entity :  <br> 

			<ul> 
				<li>config.yml in root path manage framework configuration <code>./config/config.yml</code></li>
				<li>config.yml in app bundle manage Application configuration <code>./app/config/config.yml</code> </li>
				<li>config.yml in bundles manage bundle configuration <code>./src/bundles/demoBundle/Ressources/config/config.yml</code></li>
			</ul>
		</p>
		<h4>How to use this parameters : </h4>
		<div class="doc4">
			There are different ways to access these configuration variables 
			<ul> 
				</li>
				<li>In controller By Kernel Service Container <code> this.getParameters("bundles.App") </code>
				<pre>
nodefony.registerController("default", function(){
		
	var defaultController = class defaultController extends nodefony.controller {

		constructor(container, context){
			super(container, context);
		};
		
		indexAction (version){
			// GET config bundle App
			<strong> var bundleAppSettings = this.getParameters("bundles.App") ;</strong>
			//// GET config bundle http
			<strong> var bundleHttpSettings = this.getParameters("bundles.http") ;</strong>
			
			return this.renderJson(bundleAppSettings);		
		};
	};

	return defaultController;
});
				</pre>
				</li>
				<li>In Kernel you can find  <code> this.settings </code> with framework configuration 
				<pre>

indexAction (version){
	// GET kernel service and get config
	var kernelGlobalSettings = this.get("kernel").settings ;
	
	return this.renderJson(kernelGlobalSettings);		
};
				</pre>
				</li>
				<li>In Bundle you can find <code> this.settings </code> with bundle configuration  
				<pre>
indexAction (version){
	// GET kernel service , get demo bundle  config
	var demoBundleGlobalSettings = this.get("kernel").getBundle("demo").settings ;
	
	return this.renderJson(demoBundleGlobalSettings);		
};

				</pre>
				<li>Everywhere you can find global variables by Kernel Service Container  
					<pre>
nodefony.registerService("myService", function(){

	var myService = class myService {

		constructor (kernel, container)
			this.kernel = kernel ;
			this.container = container ;
			this.name = "myService";
		};

		myFunction (){
			<strong>var kernelGlobalSettings = this.container.getParameters("kernel") ;</strong>
		};
	};

	return myService ;
});
					</pre>
				</li>
			</ul>
		</div>
	</div>
	
	
<h2> Routing Configuration  :  <code>routing.yml</code>   
	<a href="{{ path('documentation-section',{section:'routing', version:'Default', bundle:'framework' })}}"> <button type="button" class="btn btn-primary">Routing</button></a>

</h2>
<h2> Security Configuration  :  <code>security.yml</code>
	<a href="{{ path('documentation-section',{section:'configuration', version:'Default', bundle:'security' })}}"> <button type="button" class="btn btn-primary">Firewall</button></a>
	
</h2> 

<h2> Service Configuration  :  <code>service.xml</code>
	<a href="{{ path('documentation-section',{section:'service', version:version, bundle:bundle })}}"> <button type="button" class="btn btn-primary">Services</button></a>
	
</h2> 

