{{trans_default_domain("doc")}}

<a href="https://github.com/nodefony/nodefony"><img style="position: fixed; top: 51px; right: 0; border: 0;z-index:8000" src="https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png" alt="Fork me on GitHub"></a>


<div class="page-header">
  <h1>{{ "Makefile Nodefony" | trans() }} </h1>
</div>


<h2>BUILD NODEFONY FRAMEWORK </h2>

<h3>Makefile build differents part of framework :</h3>

<div class="doc3">
<pre>
$ make << target >>
</pre>
	<h3>NODEFONY </h3>
	<ul>
		<li> <strong><a href="#build">make build</a></strong>: <span style="padding-left:80px">Build all sources of NODEFONY framework</span></li>
		<li> <strong><a href="#make">make</a></strong> : <span style="padding-left:80px">Build all sources of Application </span> </li>
		<li> <strong><a href="#install">make install</a></strong>: <span style="padding-left:80px">Build all sources of Application same as target make</span></li>
		<li> <strong><a href="#framework">make framework</a></strong>: <span style="padding-left:80px">Build framework filesystem</span></li>
		<li> <strong><a href="#npm">make npm</a></strong>: <span style="padding-left:80px">Install npm dependencies</span></li>
		<li> <strong><a href="#clean">make clean</a></strong>: <span style="padding-left:80px">Clean node.js all dependencies</span></li>
		<li> <strong><a href="#sequelize">make sequelize</a></strong>: <span style="padding-left:80px">Build Sequelize Entities and fixtures</span></li>
		<li> <strong><a href="#test">make test</a></strong>: <span style="padding-left:80px">Launch all tests</span></li>
		<li> <strong><a href="#certificate">make certificate</a></strong>  : <span style="padding-left:80px">Genarate and create a self-signed Certificate for https server</span></li>
	</ul>

	<h3>PRODUCTION MANAGEMENT PM2</h3>
	<ul>
		<li> <strong><a href="#pm2">make start</a></strong> : <span style="padding-left:80px">Start Nodefony in production mode</span> </li>
		<li> <strong><a href="#pm2">make stop</a></strong>: <span style="padding-left:80px">Stop Nodefony production </span></li>
		<li> <strong><a href="#pm2">make kill</a></strong>: <span style="padding-left:80px">kill PM2 manager</span></li>
		<li> <strong><a href="#pm2">make status</a></strong>: <span style="padding-left:80px">Get status PM2</span></li>
		<li> <strong><a href="#pm2">make restart</a></strong>: <span style="padding-left:80px">Restart Nodefony in production mode</span></li>
	</ul>

	<h3>DOCKER MANAGEMENT</h3>
	<ul>
		<li> <strong><a href="#docker">make docker-compose</a></strong>: <span style="padding-left:80px">Nodefony in Docker</span></li>
	</ul>


</div>


<h2>Targets NODEFONY FRAMEWORK </h2>

<h3 id="build" >Build</h3>

<div class="doc3">
	<p>
		Must be call the first time   ( generally after clone repo )</br>
		If you want Makefile be verbose on dependencies npm install  open Makefile and set VERBOSE = 1
		<ul>
			<li>Build all sources of NODEFONY framework</li>
		</ul>
	</p>
<pre>
@echo "";
@echo "#########################################" ;
@echo "#            NODEFONY BUILD             #" ;
@echo "#########################################" ;
@echo "";

make clean ;

make certificates ;

make npm ;

make install && echo "success nodefony install !" || echo "failure nodefony install !" ;

make sequelize && echo "success nodefony sequelize !" || echo "failure nodefony sequelize !" ;

@if [ $(VERBOSE) = 0 ] ; then \
	echo "./nodefony router:generate:routes";\
	./nodefony router:generate:routes ;\
	echo "./nodefony router:match:url /";\
	./nodefony router:match:url /\
	echo "./nodefony npm:list";\
	./nodefony npm:list ;\
else \
	echo "./nodefony -d router:generate:routes";\
	./nodefony -d router:generate:routes ;\
	echo "./nodefony -d router:match:url /";\
	./nodefony -d router:match:url /\
	echo "./nodefony -d npm:list";\
	./nodefony -d npm:list ;\
fi \
</pre>
</div>


<h3 id="all" > All </h3>
<div class="doc3">
	<p>
		All target just call target install and npm to build dependencies
	</p>
	<pre>
all:   npm install
	</pre>
</div>


<h3 id="framework"> framework </h3>
<div class="doc3">
	<p>
		Must be call the first time   ( generally call by 'build' taget )

		<ul>
			<li>Build directories framework</li>
		</ul>
	</p>
	<pre>
@echo "";
@echo "####################################################" ;
@echo "#            CREATE FRAMEWORK REPOSITORY           #" ;
@echo "####################################################" ;
@echo "";

@if [ ! -d tmp ] ; then  \
    mkdir tmp ;\
fi
@if [ ! -d tmp/upload ] ; then  \
    mkdir tmp/upload ;\
fi
@if [ ! -d bin ] ; then  \
    mkdir bin ;\
fi
@if [ ! -d web ] ; then  \
    mkdir web ;\
fi
@if [ ! -d web/js ] ; then  \
    mkdir web/js ;\
fi
@if [ ! -d web/css ] ; then  \
    mkdir web/css ;\
fi
@if [ ! -d web/images ] ; then  \
    mkdir web/images ;\
fi
@if [ ! -d web/fonts ] ; then  \
    mkdir web/fonts ;\
fi
@if [ ! -d web/assets ] ; then  \
    mkdir  web/assets ;\
fi
@if [ ! -d web/assets/js ] ; then  \
    mkdir web/assets/js ;\
fi
@if [ ! -d web/assets/css ] ; then  \
    mkdir web/assets/css ;\
fi
@if [ ! -d web/assets/images ] ; then  \
    mkdir web/assets/images ;\
fi
@if [ ! -e web/favicon.ico ] ; then \
    echo " copy favicon.ico " ;\
    cp app/Resources/public/favicon.ico web/ ;\
fi
@if [ ! -e web/robots.txt ] ; then  \
    echo " copy robots.txt " ;\
    cp app/Resources/public/robots.txt web/ ;\
fi
	</pre>
</div>



<h3 id="npm">  npm   </h3>
<div class="doc3">
	<p>
		Must be call when you add dependency in package.json FRAMEWORK
		<ul>
			<li>Manage node.js dependencies  FRAMEWORK package.json</li>
		</ul>

	</p>

	<pre>
npm:
	@echo "" ;
	@echo "#######################################################" ;
	@echo "#                node.js  INSTALLATION                #" ;
	@echo "#######################################################" ;
	@echo "" ;

	@[ $(VERSION) -ge 600 ]  || ( echo '$(NODE_VERSION) NODEFONY ERROR NODE VERSION must have version >= v6.0.0  See https://nodejs.org/en/download/package-manager for upgrade version '; exit 1; )

	@if [  -f package.json  ] ; then \
		if [ $(VERBOSE) = 0 ] ; then \
			echo "npm  install" ;\
			npm  install  ;\
		else \
			echo "npm -ddd install" ;\
			npm -ddd install  ;\
		fi \
	fi
	</pre>
</div>


<h3 id="install" id="install">  install </h3>
<div class="doc3">
	<p>
		Must be call when you add bundle in appKernel.js <br>
		Must be call when you add dependency in package.json bundle
		<ul>
			<li>Manage node.js dependencies BUNDLE package.json of all bundles registred in appKernel.js</li>
			<li>Manage databases </li>
		</ul>

	</p>
	<pre>
install:
    @echo "";
    @echo "#########################################" ;
    @echo "#      NODEFONY INSTALL BUNDLES         #" ;
    @echo "#########################################" ;
    @echo "";
    @if [ $(VERBOSE) = 0 ] ; then \
        echo "./nodefony npm:install";\
        ./nodefony npm:install ;\
    else \
        echo "./nodefony -d npm:install";\
        ./nodefony -d npm:install ;\
    fi \
	</pre>
</div>


<h3 id="clean"> clean </h3>
<div class="doc3">
	<p>
		Must be call  when you want update nodefony
		<ul>
			<li>Clean  node.js all dependencies  FRAMEWORK package.json (empty node_modules directoty)</li>
			<li>Clean web public </li>
			<li>Clean temporary files  </li>
			<li>Rebuild  FRAMEWORK </li>
		</ul>
	</p>
	<pre>
clean:
	@if [ -e  node_modules ] ; then \
		echo "###########  CLEAN  NODE MODULES ###########" ;\
		rm -rf node_modules/* ; \
	fi
	@if [ -e  tmp ] ; then \
		echo "###########  CLEAN  TEMPORARY  ###########" ;\
		rm -rf tmp/* ; \
	fi
	@if [ -e  web ] ; then \
		echo "###########  CLEAN  WEB PUBLIC DIRECTOY  ###########" ;\
		rm -rf web/* ; \
	fi
	make framework

	</pre>
</div>

<h3 id="sequelize"> sequelize </h3>
<div class="doc3">
	<p>
		Must be call before run nodefony (developpement or prodution)  </br>
		Generally call by 'build' target
		<ul>
			<li>Generate ORM databases and entities of all bundles registred </li>
			<li>Generate fixtures of all bundles registred </li>
		</ul>
	</p>
	<pre>
sequelize:
    ./nodefony Sequelize:generate:entities
	./nodefony Sequelize:fixtures:load
	</pre>
</div>

<h2>Targets PM2 MANAGEMENT PRODUCTION </h2>

<h3 id="start">  start </h3>
<div class="doc3">
	<p>
		RUN NODEFONY IN PRODUTION MODE  </br>
		<ul>
			<li>Build all Assets and compile templates views </li>
			<li>RUN nodefony in prodution mode see <a href="{{ path('documentation-section',{section:'configurations', version:version, bundle:bundle, queryString:{'subsection':'framework'} })}}#pm2">Configuration PM2</a>  </li>
		</ul>
	</p>

	<pre>
start:
    ./node_modules/pm2/bin/pm2 update
    ./nodefony pm2
    ./node_modules/pm2/bin/pm2 --lines 1 logs
	</pre>
</div>


<h3 id="stop">  stop   </h3>
<div class="doc3">
<p>
		STOP NODEFONY IN PRODUTION MODE  </br>
		<ul>
			<li>STOP All clusters </li>
		</ul>
	</p>

	<pre>
stop:
	./node_modules/pm2/bin/pm2 stop nodefony

	</pre>
</div>


<h3 id="pm2"> Targets : kill startup show monit</h3>
<div class="doc3">
	<p>
		PM2 MANAGEMENT see <a href="http://pm2.keymetrics.io/docs/usage/quick-start/#cheatsheet/">documentation</a>   </br>
	</p>
	<pre>
startup:
	./node_modules/pm2/bin/pm2 startup

kill:
	./node_modules/pm2/bin/pm2 kill

show:
	./node_modules/pm2/bin/pm2 show nodefony

monit:
	./node_modules/pm2/bin/pm2 monit nodefony

status:
	./node_modules/pm2/bin/pm2 status

reload:
	./node_modules/pm2/bin/pm2 reload all

restart:
	./node_modules/pm2/bin/pm2 restart all

	</pre>
</div>



<h2 >Targets Certificates </h2>
<h3 id="certificate">Generate Certificates</h3>
<div class="doc3">
	<p>
		This Target is called during the build of framework</br>
		A script generate self-signed SSL Certificate  (on localhost)
	</p>

	<pre>
certificates:
	@echo "";
	@echo "#########################################" ;
	@echo "#         NODEFONY CERTIFICATES         #" ;
	@echo "#########################################" ;
	@echo "";
	./bin/generateCertificates.sh;
	</pre>

</div>


<h2 >Targets DOCKER MANAGEMENT </h2>
<h3 id="docker">   docker-compose</h3>
<div class="doc3">
	<p>
		This Target Build Nodefony Docker with composer ( mariadb , nginx in front ) </br>
		DOCKER COMPOSE see <a href="https://docs.docker.com/compose/">Docker documentation</a>   </br>
		DOCKER COMPOSE see <a href="{{ path('documentation-section',{section:'installation', version:version, bundle:bundle, queryString:{'subsection':'docker'} })}}">Nodefony documentation</a>   </br>
		These targets call targets in Makefile docker directory
	</p>
	<code>Makefile </code>
	<pre>
docker-compose: docker-compose-stop
	$(MAKE) -C docker compose-start

docker-compose-stop:
	$(MAKE) -C docker compose-stop

docker-compose-rm: docker-compose-stop
	$(MAKE) -C docker compose-rm

docker-compose-clean:
	$(MAKE) -C docker clean
	</pre>

	<pre>
#TO START
$ make docker-compose

#TO STOP
$ make docker-compose-stop

#TO REMOVE COMPOSER
$ make docker-compose-rm
	</pre>

</div>


<h3 > docker-build</h3>
<div class="doc3">
	<p>
		NODEFONY DOCKER BUILD  see <a href="">documentation</a>   </br>
		this target an internal use for building a docker realease
	</p>

</div>
