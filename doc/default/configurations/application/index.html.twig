
<div class="page-header">
	<h1>Application Configuration</h1>
	<p>
		 Bundle Application is a special bundle in  app directory you can find a 'config' directory  <br>

		<h2 > You can see here :</h2>

		<p>
			<ul>
				<li><a href="#global_application">Goblal Configuration</a></li>
				<li><a href="#routing_application">Routing Configuration</a></li>
				<li><a href="#firewall_application">Firewall Configuration</a></li>
				<li><a href="#webpack">Webpack Configurations</a></li>
				<li><a href="#override">Override Configuration</a></li>
			</ul>
		<p>

	<p>
</div>

<h2>Location configurations in File System <span class="badge">Directory</span></h2>
<div class="doc2">
Location : <code>./app/config</code>
<pre>
$ ls -l ./app/config
total 48
-rw-r--r--  1 cci  staff  5952 15 nov 11:35 config.yml
-rw-r--r--  1 cci  staff   138 23 oct 09:51 routing.js
-rw-r--r--  1 cci  staff   411  2 nov 09:41 security.yml
-rw-r--r--  1 cci  staff    21 14 nov 18:20 services.js
drwxr-xr-x  4 cci  staff   136  2 nov 09:41 webpack
-rw-r--r--  1 cci  staff  2140  2 nov 09:41 webpack.config.js

app/config/
├── config.yml
├── routing.js
├── security.yml
├── services.js
├── webpack
│   ├── webpack.dev.config.js
│   └── webpack.prod.config.js
└── webpack.config.js

</pre>
</div>


<h2 id="global_application" >Goblal Configuration <span class="badge">File</span> </h2>

<div class="doc2">

<div class="panel panel-default">
  <!-- Default panel contents -->
  <div class="panel-heading"> Application Global Configuration </div>
  <div class="panel-body">

  	  <div class="doc3">
  		  <div class="alert alert-info" role="alert">
  			  <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
  			  Application  is a Bundle with special comportement <br>
			  This file override configuration of multiple Third-Party Bundles
  		  </div>
  	  </div>

	  Location : <code>./app/config/config.yml</code>
    <pre>
######################
#  NODEFONY APP CONFIG
#
#   @here You can OVERRIDE all Bundles Configurations
#
name :                           AppBundle
version:                         1.0.0
locale :                         en_en
App:
  projectName:                   "nodefony"
  projectYear:                   2017
  locale:                        "en_en"
  authorName:                    "admin"
  authorMail:                    "admin@nodefony.com"

lang:
  en_en:                         "english"
  fr_fr:                         "français"

##################################
#  WATCHERS
#
#    watchers Listen to changes, deletion, renaming of files and directories
#    of different components
#
#    For watch all components
#
#      watch:                    true
#    or
#      watch:
#        controller:             true
#        config:                 true        # only  routing.yml
#        views:                  true
#        translations:           true
#        webpack:                true
#
watch:                           true

##################################
#  OVERRIDE BUNDLE MONITORING
#
#    see MONITORING BUNDLE config for more options
#
#
monitoringBundle:
  debugBar:                      true
  forceDebugBarProd:             false
  storage:
    active:                      false
    requests:                    orm

##################################
#  OVERRIDE  BUNDLE SEQUELIZE
#
#       @see SEQUELIZE BUNDLE config for more options
#       @more options http://docs.sequelizejs.com/class/lib/sequelize.js~Sequelize.html
#
#       Nodefony Database Management
#        dialect :               'mysql'|'sqlite'|'postgres'|'mssql'
#
#       By default nodefony create  connector name nodefony ( driver sqlite )
#       for manage Sessions / Users / Requests
#
#       For mysql/mariadb create database nodefony before
#       Mysql > CREATE DATABASE nodefony;
#
#       Here create new databases connectors
#       and use for sync connectors :
#       make sequelize
#
sequelizeBundle:
  debug:                         false
#  connectors:
#    nodefony:
#      driver:                   mysql
#      dbname:                   'nodefony'
#      username:                 'nodefony'
#      password:                 'nodefony'
#      options:
#        dialect:                mysql
#        host:                   localhost
#        port:                   '3306'

############################
#  OVERRIDE BUNDLE HTTP
#
#       see HTTP BUNDLE config for more options
#
#       query string parser
#       form-data multipart parser
#       upload
#       statics files
#       session
#       http server
#       https server
#       upload
#       websocket server
#       websocket secure server
#       sockjs dev server ( webpack dev server like WDS)
#
#
httpBundle:
  # For more options parser formidable @see : https://github.com/felixge/node-formidable
  request:
    uploadDir:                   "/tmp"                        # temporing file upload system
    maxFileSize:                 2097152                        # In Bytes
    maxFieldsSize:               2097152                       # 2MB
    maxFields:                   1000                          # 0 for unlimited
  # For more options parser QS @see : https://github.com/ljharb/qs
  queryString:
    parameterLimit:              1000
    delimiter:                   "&"
  # Server @see :                https://nodejs.org/dist/latest-v8.x/docs/api/http.html#http_class_http_server
  http:
    responseTimeout:             40000
  https:
    responseTimeout:             40000
  sockjs:
      overlay:                   true
      hot:                       true
      protocol:                  https
      websocket:                 true
  statics:
    defaultOptions:
      cacheControl :             true
      maxAge:                    0
    web:
      path:                      "web"
      options:
        maxAge:                  0                             #30*24*60*60*1000
  session:
    start:                       false                 # false || true || Name Session Context
    name:                        "nodefony"
    handler:                     sequelize             # files | sequelize | memcached  "nodefony.session.storage"
    #save_path:                  "./tmp/sessions"      # for session.storage.files only
    use_strict_mode:             true
    gc_probability:              1
    gc_divisor:                  100
    gc_maxlifetime:              1440
    use_cookies:                 true
    use_only_cookies:            true
    referer_check:               false
    cookie:
      maxAge:                    0                     # like cookie_lifetime php  =>seconde
      secure:                    false                 # Set true for https site only see https://developer.mozilla.org/fr/docs/Web/HTTP/Headers/Set-Cookie
    memcached:
      servers:
        nodefony:
          location:              127.0.0.1
          port:                  11211
          weight:                1

#######################
#  OVERRIDE SECURITY BUNDLE
#
#   HEADERS SECURITY
#
#    Content-Security-Policy
#    Strict-Transport-Security
#     ...
#    Manage and Clean hsts in chrome
#     chrome://net-internals/#hsts
#
securityBundle:
  headers:
    http:
     #Strict-Transport-Security: "max-age=31536000; includeSubDomains; preload"
     X-Frame-Options:            "SAMEORIGIN"
     X-Content-Type-Options:     "nosniff"
    https           :
     #Strict-Transport-Security: "max-age=31536000; includeSubDomains; preload"
     X-Frame-Options:            "SAMEORIGIN"
     X-Content-Type-Options:     "nosniff"

################################
#  OVERRIDE BUNDLE REALTIME
#
#       see REALTIME BUNDLE config for more options
#
#
realTimeBundle:
  services:
    monitoring:
      type:                      tcp
      port:                      1318
      domain:                    localhost

	  </pre>
  </div>

  <table class="table">
	<thead>
		<th class="config-parameters">Parameters</th>
		<th>Description</th>
		<th>Data Type</th>
		<th>Example / <span class="badge">Default</span> </th>
	</thead>
	  <tbody>
	  <tr>
		  <td class="config-parameters">name</td>
		  <td>Bundle Name</td>
		  <td>String</td>
		  <td>AppBundle</td>
	  </tr>
	  <tr>
		  <td class="config-parameters">version</td>
		  <td>Bundle Version </td>
		  <td>String</td>
		  <td>1.0</td>
	  </tr>
	  <tr>
		  <td class="config-parameters">locale</td>
		  <td>I18n Bundle locale</td>
		  <td>String</td>
		  <td>en_en</td>
	  </tr>

	  <tr>
		  <td class="config-parameters">App.projectName</td>
		  <td>
			  Name of Application (project)
		  </td>
		  <td>String</td>
		  <td></span></td>
	  </tr>
	  <tr>
		  <td class="config-parameters">App.projectYear</td>
		  <td>
			Year Application
		  </td>
		  <td>String</td>
		  <td></td>
	  </tr>
	  <tr>
		  <td class="config-parameters">App.locale</td>
		  <td>
			Application locale i18n
		  </td>
		  <td>String</td>
		  <td><span class="badge">en_en</span></td>
	  </tr>
	  <tr>
		  <td class="config-parameters">App.authorName</td>
		  <td>Author </td>
		  <td>String</td>
		  <td></td>
	  </tr>
	  <tr>
		  <td class="config-parameters">App.authorMail</td>
		  <td>
			  Author email
		  </td>
		  <td>String</td>
		  <td></td>
	  </tr>
	  <tr>
		  <td class="config-parameters">lang</td>
		  <td>
			  All langs enable in Application
		  </td>
		  <td>Object</td>
		  <td></td>
	  </tr>

	  </tbody>
  </table>
  </div>
</div>

<h2 id="routing_application" >Application Routing Configuration <span class="badge">File</span> </h2>
<div class="doc2">
<div class="panel panel-default">
  <!-- Default panel contents -->
  <div class="panel-heading"> Application Routing Configuration </div>
  <div class="panel-body">
	  <p>Location : <code>./app/config/routing.js</code></p>
	  <pre>
module.exports = {
  // HOME
  home: {
    pattern: "/",
    defaults: {
      controller: "AppBundle:app:index"
    }
  }
};
	  </pre>
  </div>
</div>
</div>


<h2 id="firewall_application" >Application Firewall Configuration <span class="badge">File</span> </h2>

<div class="doc2">
<div class="panel panel-default">
  <!-- Default panel contents -->
  <div class="panel-heading"> Application Firewall Configuration </div>
  <div class="panel-body">
	  <p>Location : <code>./app/config/security.yml</code></p>
	  <pre>
# Security
security:

  #
  #  FIREWALL strategy
  #  when change security context (multi firewalls areas)
  #
  session_fixation_strategy:  migrate  # Strategy can be : none, migrate, invalidate

  #
  #  FIREWALL  AREAS
  #
  firewalls: ~

  #
  #  FIREWALL  PROVIDER
  #
  providers: ~
	  </pre>
  </div>
</div>
</div>

<h2 id="webpack" >Configuration Webpack <span class="badge">FILE</span> </h2>

<div class="doc2">
	<div class="panel panel-default">
	  <!-- Default panel contents -->
	  <div class="panel-heading"> Bundle Webpack Configuration </div>
	  <div class="panel-body">
		  <p>Location : <code>./app/config/webpack.config.js</code></p>
		  <pre>
const path = require("path");
const ExtractTextPluginCss = require('extract-text-webpack-plugin');
const public = path.resolve(__dirname, "..", "Resources", "public");
const bundleName = path.basename(path.resolve(__dirname, ".."));
const webpackMerge = require('webpack-merge');

let config = null;
if (kernel.environment === "dev") {
  config = require("./webpack/webpack.dev.config.js");
} else {
  config = require("./webpack/webpack.prod.config.js");
}

module.exports = webpackMerge(config, {
  context: public,
  target: "web",
  //watch: false,
  entry: {
    app: ["./js/app.js"]
  },
  output: {
    path: public,
    filename: "./assets/js/[name].js",
    library: "[name]",
    libraryTarget: "umd"
  },
  externals: {},
  resolve: {},
  module: {
    rules: [{
      // BABEL TRANSCODE
      test: new RegExp("\.es6$|\.js$"),
      exclude: new RegExp("node_modules"),
      use: [{
        loader: 'babel-loader',
        options: {
          presets: ['env']
        }
      }]
    }, {
      // CSS EXTRACT
      test: new RegExp("\.css$"),
      use: ExtractTextPluginCss.extract({
        use: 'css-loader'
      })
    }, {
      // SASS
      test: new RegExp(".scss$"),
      use: [{
        loader: 'style-loader'
      }, {
        loader: 'css-loader'
      }, {
        loader: 'sass-loader'
      }]
    }, {
      test: new RegExp("\.less$"),
      use: ExtractTextPluginCss.extract({
        use: [
          "raw-loader",
          {
            loader: 'less-loader',
            options: {
              //strictMath: true,
              //noIeCompat: true
            }
          }
        ]
      })
    }, {
      // FONTS
      test: new RegExp("\.(eot|woff2?|svg|ttf)([\?]?.*)$"),
      use: 'file-loader?name=[name].[ext]&publicPath=/' + bundleName + '&outputPath=/assets/fonts/',
    }, {
      // IMAGES
      test: new RegExp("\.(jpg|png|gif)$"),
      use: 'file-loader?name=[name].[ext]&publicPath=/' + bundleName + '&outputPath=/assets/images/'
    }]
  },
  plugins: [
    new ExtractTextPluginCss({
      filename: "./assets/css/[name].css",
    })
  ]
});
		  </pre>
		  <p>Location : <code>./app/config/webpack/webpack.dev.config.js</code></p>
			<p> App add  HRM config  ( Hot Module Replacement ) </p>
		  <pre>
const webpackDevClient = "webpack-dev-server/client?https://" + kernel.hostHttps + "/";
module.exports = {
  entry: {
    app: [webpackDevClient]
  },
  devtool: "source-map",
  plugins: []
};
		  </pre>
			<p>Location : <code>./app/config/webpack/webpack.prod.config.js</code></p>
			<pre>
const OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin');
const UglifyJsPlugin = require('uglifyjs-webpack-plugin');

module.exports = {
  watch: false,
  plugins: [
    new OptimizeCssAssetsPlugin({
      cssProcessorOptions: {
        discardComments: {
          removeAll: true
        }
      },
      canPrint: true
    }),
    new UglifyJsPlugin({
      uglifyOptions: {
        warnings: true,
        compress: true
      },
      parallel: true
    })
  ]
};
		  </pre>
	  </div>
	</div>
</div>

<h2 id="override">Override GLOBAL CONFIGURATION from Third-Party Bundles :</h2>
	<div class="doc2">
		<p>
			To override global configuration from Third-Party Bundles you can write in config.yml (root yaml node) the full name of bundle
		</p>
		<div class="alert  alert-info" role="alert">
			WARNING to the order Registration bundles <br>
			If you want override a config of Third-Party bundle, this one must be register before the bundle config file  who make the override
		</div>
		Example <code>./app/config/config.yml </code>
		<pre>
....

##################################
#
#       OVERRIDE  BUNDLE SEQUELIZE
#
#       see SEQUELIZE BUNDLE config for more options
#
#       Nodefony Database Management
#
#       By default nodefony create  connector name nodefony ( driver sqlite )
#       for manage Sessions / User
#
#
#       here create new databases connectors ( example mysql)
#
#
sequelizeBundle:
  debug:        false
  connectors:
    nodefony:
      driver:          mysql
      dbname:          'nodefony'
      username:        'username'
      password:        'password'
      options:
        dialect:       mysql
        host:          localhost
        port:          '3306'


#
#       OVERRIDE BUNDLE MONITORING
#
#       see MONITORING BUNDLE config for more options
#
#
<strong>monitoringBundle:</strong>
debugBar:                     true
#storage:                      false

....


// STARTED NODEFONY SYSLOG :
Mon Oct 03 2016 17:10:41 WARNING BUNDLE APP  :  OVERRIDING  CONFIG bundle  : sequelize
Mon Oct 03 2016 17:10:41 WARNING BUNDLE APP  :  OVERRIDING  CONFIG bundle  : monitoring
		</pre>

	</div>
