
<div class="page-header">
	<h1>Application Configuration</h1>
	<p>
		 Bundle Application is a special bundle in  app directory you can find a 'config' directory  <br>

		<h2 > You can see here :</h2>

		<p>
			<ul>
				<li><a href="#global_application">Goblal Configuration</a></li>
				<li><a href="#routing_application">Routing Configuration</a></li>
				<li><a href="#firewall_application">Firewall Configuration</a></li>
				<li><a href="#webpack">Webpack Configurations</a></li>
				<li><a href="#override">Override Configuration</a></li>
			</ul>
		<p>

	<p>
</div>

<h2>Location configurations in File System <span class="badge">Directory</span></h2>
<div class="doc2">
Location : <code>./app/config</code>
<pre>
$ ls -l ./app/config
total 24
-rw-r--r--  1 cci  staff  3944 31 jul 10:01 config.yml
-rw-r--r--  1 cci  staff    70 28 jul 14:24 routing.yml
-rw-r--r--  1 cci  staff   302 25 jul 17:43 security.yml
drwxr-xr-x  5 cci  staff   170 19 jul 11:30 webpack

app/config/
├── config.yml
├── routing.yml
├── security.yml
└── webpack
    ├── webpack.common.js
    ├── webpack.dev.config.js
    └── webpack.prod.config.js
</pre>
</div>


<h2 id="global_application" >Goblal Configuration <span class="badge">File</span> </h2>

<div class="doc2">

<div class="panel panel-default">
  <!-- Default panel contents -->
  <div class="panel-heading"> Application Global Configuration </div>
  <div class="panel-body">

  	  <div class="doc3">
  		  <div class="alert alert-info" role="alert">
  			  <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
  			  Application  is a Bundle with special comportement <br>
			  This file override configuration of multiple Third-Party Bundles
  		  </div>
  	  </div>


	  Location : <code>./app/config/config.yml</code>
    	  <pre>
  #####################
  #
  #  FRAMEWORK NODEFONY
  #
  #     APP CONFIG
  name :                          AppBundle
  version:                        1.0.0
  locale :                        en_en


  App:
    projectName:                  "nodefony"
    projectYear:                  2017
    locale:                       "en_en"
    authorName:                   "admin"
    authorMail:                   "admin@nodefony.com"

  lang:
    en_en:                        "english"
    fr_fr:                        "français"


  #
  #  WATCHERS
  #
  #    watchers Listen to changes, deletion, renaming of files and directories
  #    of different components
  #
  #    For watch all components
  #
  #      watch:			true
  #    or
  #      watch:
  #        controller:		true
  #        config:        true		# only  routing.yml
  #        views:			    true
  #        translations:  true
  #        webpack:       true
  #
  watch:				true


  ##################################
  #
  #       OVERRIDE BUNDLE MONITORING
  #
  #       see MONITORING BUNDLE config for more options
  #
  #
  monitoringBundle:
    debugBar:                     true
    storage:
      active:                     false
      requests:                   orm


  ##################################
  #
  #       OVERRIDE  BUNDLE SEQUELIZE
  #
  #       see SEQUELIZE BUNDLE config for more options
  #
  #       Nodefony Database Management
  #
  #       By default nodefony create  connector name nodefony ( driver sqlite )
  #       for manage Sessions / User
  #
  #
  #       here create new databases connectors
  #
  #
  sequelizeBundle:
    debug:        false
    connectors:
      nodefony:
        driver:          mysql
        dbname:          'nodefony'
        username:        'username'
        password:        'password'
        options:
          dialect:       mysql
          host:          localhost
          port:          '3306'


  ############################
  #
  #       OVERRIDE BUNDLE HTTP
  #
  #       see HTTP BUNDLE config for more options
  #
  #       // SERVICES
  #       statics files
  #       session
  #       http server
  #       https server
  #       upload
  #       websocket server
  #       websocket secure server
  #       sockjs dev server ( webpack dev server like WDS)
  #
  #
  httpBundle:
    http:
      responseTimeout:              40000
    https:
      responseTimeout:              40000
    sockjs:
        overlay:                      true
        hot:                          true
        protocol:                     https
        websocket:                    true
    statics:
      defaultOptions:
        cacheControl :              true
        maxAge:                     0
      web:
        path:                       "web"
        options:
          maxAge:                   0                             #30*24*60*60*1000
    upload:
      tmp_dir:                      "tmp/upload"
      #max_filesize:                 100000                       #in Bytes
    session:
      start:                        false                         # autostart || false
      handler:                      session.storage.sequelize     # session.storage.files | session.storage.sequelize | session.storage.memcached
      #save_path:                    "./tmp/sessions"             # for session.storage.files only
      cookie:
        maxAge:                     0                             # like cookie_lifetime php  =>seconde

  ################################
  #
  #       OVERRIDE BUNDLE REALTIME
  #
  #       see REALTIME BUNDLE config for more options
  #
  #
  realTimeBundle:
    services:
      monitoring:
        type:                       tcp
        port:                       1318
        domain:                     localhost
	  </pre>
  </div>

  <table class="table">
	<thead>
		<th class="config-parameters">Parameters</th>
		<th>Description</th>
		<th>Data Type</th>
		<th>Example / <span class="badge">Default</span> </th>
	</thead>
	  <tbody>
	  <tr>
		  <td class="config-parameters">name</td>
		  <td>Bundle Name</td>
		  <td>String</td>
		  <td>AppBundle</td>
	  </tr>
	  <tr>
		  <td class="config-parameters">version</td>
		  <td>Bundle Version </td>
		  <td>String</td>
		  <td>1.0</td>
	  </tr>
	  <tr>
		  <td class="config-parameters">locale</td>
		  <td>I18n Bundle locale</td>
		  <td>String</td>
		  <td>en_en</td>
	  </tr>

	  <tr>
		  <td class="config-parameters">App.projectName</td>
		  <td>
			  Name of Application (project)
		  </td>
		  <td>String</td>
		  <td></span></td>
	  </tr>
	  <tr>
		  <td class="config-parameters">App.projectYear</td>
		  <td>
			Year Application
		  </td>
		  <td>String</td>
		  <td></td>
	  </tr>
	  <tr>
		  <td class="config-parameters">App.locale</td>
		  <td>
			Application locale i18n
		  </td>
		  <td>String</td>
		  <td><span class="badge">en_en</span></td>
	  </tr>
	  <tr>
		  <td class="config-parameters">App.authorName</td>
		  <td>Author </td>
		  <td>String</td>
		  <td></td>
	  </tr>
	  <tr>
		  <td class="config-parameters">App.authorMail</td>
		  <td>
			  Author email
		  </td>
		  <td>String</td>
		  <td></td>
	  </tr>
	  <tr>
		  <td class="config-parameters">lang</td>
		  <td>
			  All langs enable in Application
		  </td>
		  <td>Object</td>
		  <td></td>
	  </tr>

	  </tbody>
  </table>
  </div>
</div>

<h2 id="routing_application" >Application Routing Configuration <span class="badge">File</span> </h2>
<div class="doc2">
<div class="panel panel-default">
  <!-- Default panel contents -->
  <div class="panel-heading"> Application Routing Configuration </div>
  <div class="panel-body">
	  <p>Location : <code>./app/config/routing.yml</code></p>
	  <pre>
home:
  pattern:  /
  defaults:
    controller: "AppBundle:app:index"
	  </pre>
  </div>
</div>
</div>


<h2 id="firewall_application" >Application Firewall Configuration <span class="badge">File</span> </h2>

<div class="doc2">
<div class="panel panel-default">
  <!-- Default panel contents -->
  <div class="panel-heading"> Application Firewall Configuration </div>
  <div class="panel-body">
	  <p>Location : <code>./app/config/security.yml</code></p>
	  <pre>
# Security
security:

  #
  #  FIREWALL strategy
  #  when change security context (multi firewalls areas)
  #
  session_fixation_strategy:  migrate  # Strategy can be : none, migrate, invalidate

  #
  #  FIREWALL  AREAS
  #
  firewalls: ~

  #
  #  FIREWALL  PROVIDER
  #
  providers: ~
	  </pre>
  </div>
</div>
</div>


<h2 id="webpack" >Configuration Webpack <span class="badge">FILE</span> </h2>

<div class="doc2">
	<div class="panel panel-default">
	  <!-- Default panel contents -->
	  <div class="panel-heading"> Bundle Webpack Configuration </div>
	  <div class="panel-body">
		  <p>Location : <code>./app/config/webpack/webpack.common.js</code></p>
		  <pre>
const path = require("path");
const webpack = require('webpack');
const ExtractTextPluginCss = require('extract-text-webpack-plugin');
const public = path.resolve(__dirname, "..", "..","Resources", "public");
const bundleName = path.basename( path.resolve( __dirname, "..", "..") );
const webpackDevClient = "webpack-dev-server/client?https://"+kernel.hostHttps+"/";

module.exports = {
  context     : public ,
  target      : "web",
  entry       : {
    app       : ["./js/app.js", webpackDevClient ]
  },
  output      : {
      path    : public,
      filename: "./assets/js/[name].js",
      library:  "[name]",
      libraryTarget: "umd"
  },
  externals: {
  },
  resolve:{
  },
  module      : {
      rules: [{
          // BABEL TRANSCODE
        	test: new RegExp("\.es6$|\.js$"),
  		exclude: new RegExp("node_modules"),
  		use: [
				{
					loader: 'babel-loader',
					options: {
						presets: ['es2015']
					}
				}
          ]
  		},{
              // CSS EXTRACT
  			test: new RegExp("\.css$"),
  			use: ExtractTextPluginCss.extract({
  				use: 'css-loader'
  			})
  		},{
              // SASS
              test: new RegExp(".scss$"),
              use: [{
                      loader: 'style-loader'
                  },{
                      loader: 'css-loader'
                  },{
                      loader: 'sass-loader'
                  }
              ]
          },{
  			test: new RegExp("\.less$"),
  			use: ExtractTextPluginCss.extract({
  				use: [
  					"raw-loader",
  					{
  						loader:	'less-loader',
  						options: {
  							//strictMath: true,
  							//noIeCompat: true
  						}
  				}]
  			})
  		},{
              // FONTS
  			test: new RegExp("\.(eot|woff2?|svg|ttf)([\?]?.*)$"),
  			use: 'file-loader?name=[name].[ext]&publicPath=/'+bundleName+'&outputPath=/assets/fonts/',
  		},{
              // IMAGES
  			test: new RegExp("\.(jpg|png|gif)$"),
    		    use: 'file-loader?name=[name].[ext]&publicPath=/'+bundleName+'&outputPath=/assets/images/'
  	}]
  },
  plugins: [
    new ExtractTextPluginCss( {
			filename:"./assets/css/[name].css"
	})
  ]
};
		  </pre>
		  <p>Location : <code>./app/config/webpack/webpack.dev.config.js</code></p>
		  <pre>
const path = require("path");
const webpack = require('webpack');
const ExtractTextPluginCss = require('extract-text-webpack-plugin');
const webpackMerge = require('webpack-merge'); // used to merge webpack configs
const public = path.resolve(__dirname, "..", ".." ,"public");
const bundleName = path.basename( path.resolve( __dirname, "..", "..", "..") );
const commonConfig = require("./webpack.common.js");
const webpackDevClient = "webpack-dev-server/client?https://"+kernel.hostHttps+"/";

module.exports = webpackMerge( {
  //watch       : false,
  devtool     : "source-map",
  plugins     :[]
}, commonConfig );

		  </pre>
		  <p>Location : <code>./app/config/webpack/webpack.prod.config.js</code></p>
		  <pre>
const path = require("path");
const webpack = require('webpack');
const ExtractTextPluginCss = require('extract-text-webpack-plugin');
const OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin');
const webpackMerge = require('webpack-merge'); // used to merge webpack configs
const public = path.resolve(__dirname, "..", ".." ,"public");
const bundleName = path.basename( path.resolve( __dirname, "..", "..", "..") );
const commonConfig = require("./webpack.common.js");

module.exports = webpackMerge( {
  watch       : false,
  plugins     :[
      new OptimizeCssAssetsPlugin(  {
          cssProcessorOptions: { discardComments: {removeAll: true } },
          canPrint: true
      }),
      new webpack.optimize.UglifyJsPlugin({
              minimize: true
      })
  ]
}, commonConfig );

		  </pre>
	  </div>
	</div>
</div>

<h2 id="override">Override GLOBAL CONFIGURATION from Third-Party Bundles :</h2>
	<div class="doc2">
		<p>
			To override global configuration from Third-Party Bundles you can write in config.yml (root yaml node) the full name of bundle
		</p>
		<div class="alert  alert-info" role="alert">
			WARNING to the order Registration bundles <br>
			If you want override a config of Third-Party bundle, this one must be register before the bundle config file  who make the override
		</div>
		Example <code>./app/config/config.yml </code>
		<pre>
....

##################################
#
#       OVERRIDE  BUNDLE SEQUELIZE
#
#       see SEQUELIZE BUNDLE config for more options
#
#       Nodefony Database Management
#
#       By default nodefony create  connector name nodefony ( driver sqlite )
#       for manage Sessions / User
#
#
#       here create new databases connectors ( example mysql)
#
#
sequelizeBundle:
  debug:        false
  connectors:
    nodefony:
      driver:          mysql
      dbname:          'nodefony'
      username:        'username'
      password:        'password'
      options:
        dialect:       mysql
        host:          localhost
        port:          '3306'


#
#       OVERRIDE BUNDLE MONITORING
#
#       see MONITORING BUNDLE config for more options
#
#
<strong>monitoringBundle:</strong>
debugBar:                     true
#storage:                      false

....


// STARTED NODEFONY SYSLOG :
Mon Oct 03 2016 17:10:41 WARNING BUNDLE APP  :  OVERRIDING  CONFIG bundle  : sequelize
Mon Oct 03 2016 17:10:41 WARNING BUNDLE APP  :  OVERRIDING  CONFIG bundle  : monitoring
		</pre>

	</div>
