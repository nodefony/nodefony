<h1>Hello Word<h1>

<h2>Generate hello Bundle :</h2>
Command console to Generate new bundle :    <strong>generate:bundle name path</strong>
<br/>
<br/>
<pre>
$ <strong>nodefony generate:bundle hello src/bundles</strong>

# Or Interactive Mode

$ <b>nodefony</b>
  <b>?  Nodefony CLI :  Generater</b>
?  Nodefony CLI :  (Use arrow keys)
‚ùØ <b>Generate New Bundle</b>
  Generate New Controller
  Generate New Service
  Generate New Entity
  Generate New Nodefony Project
  Generate Openssl Certificates
  Generate Haproxy Configuration
  Generate Nginx Configuration
  Generate letsEncrypt Webroot Configuration
</pre>

<p>
	<strong>Example files system after Generate Bundle :  </strong>
</p>
<pre>
<b>ls -l src/bundles/hello-bundle</b>
total 456
drwxr-xr-x    4 cci  staff     136 13 sep 15:43 Command
drwxr-xr-x    3 cci  staff     102 13 sep 15:43 Entity
drwxr-xr-x    6 cci  staff     204 13 sep 15:43 Resources
drwxr-xr-x    3 cci  staff     102 13 sep 15:43 build
drwxr-xr-x    3 cci  staff     102 13 sep 15:43 controller
drwxr-xr-x    3 cci  staff     102 13 sep 15:43 doc
-rw-r--r--    1 cci  staff     628 13 sep 15:43 helloBundle.js
drwxr-xr-x  438 cci  staff   14892 13 sep 15:43 node_modules
-rw-r--r--    1 cci  staff  217359 13 sep 15:43 package-lock.json
-rw-r--r--    1 cci  staff     926 13 sep 15:43 package.json
-rw-r--r--    1 cci  staff       1 13 sep 15:43 readme.md
drwxr-xr-x    3 cci  staff     102 13 sep 15:43 services
drwxr-xr-x    2 cci  staff      68 13 sep 15:43 src
drwxr-xr-x    3 cci  staff     102 13 sep 15:43 tests
</pre>

<h2> AUTO REGISTRATION :</h2>
<p>
  The bundle generation engine auto registre generated bundle in framework : <br>
  During the generation of a bundle nodefony uses a temporary yml file <strong>./config/generatedConfig.yml </strong><br>
</p>

<code>./config/generatedConfig.yml</code>
<pre>
system:
  bundles:
  hello: src/bundles/hello-bundle
</pre>
<p>
  If the bundle is to be used in a durable way It is preferable to register the bundles in framework config file : <strong>  ./config/config.yml</strong> <br>
</p>
<code>./config/config.yml</code>
<pre>
system:
  bundles:
    hello: file:src/bundles/hello-bundle
</pre>

<h2> Generated VIEW :</h2>
<code>src/bundles/hello-bundle/Resources/views/index.html.twig</code>
<pre>
&#123;% extends '/app/Resources/views/base.html.twig' %&#125;

&#123;% block title %&#125;Welcome &#123;&#123;kernel.name&#125;&#125;! &#123;% endblock %&#125;

&#123;% block stylesheets %&#125;

  &#123;&#123; parent() &#125;&#125;

  <strong>&lt;!-- WEBPACK BUNDLE --&gt;
  &lt;link rel='stylesheet' href='&#123;&#123;CDN("stylesheet")&#125;&#125;/hello-bundle/assets/css/hello.css' /&gt;</strong>

&#123;% endblock %&#125;

&#123;% block body %&#125;
  &lt;div class='container'&gt;
  &lt;div class='row'&gt;
  &#123;&#123;readme&#125;&#125;
  &lt;/div&gt;
  &lt;/div&gt;
&#123;% endblock %&#125;

&#123;% block javascripts %&#125;

  &#123;&#123; parent() &#125;&#125;

  <strong>&lt;!-- WEBPACK BUNDLE --&gt;
  &lt;script src='&#123;&#123;CDN("javascript")&#125;&#125;/hello-bundle/assets/js/hello.js'&gt;&lt;/script&gt;</strong>

&#123;% endblock %&#125;
</pre>
<h2> Generated Controller :</h2>
<code>src/bundles/hello-bundle/controller/defaultController.js</code>
<pre>
module.exports = class defaultController extends nodefony.controller {

	constructor (container, context){
		super(container, context);
	}

	/**
	 *
	 *	@method indexAction
	 *
	 */
	indexAction (){
		try {
			return this.render("hello-bundle::index.html.twig", {
				name: "hello-bundle"			});
		}catch(e){
			throw e;
		}
	}
};
</pre>

<h2> WATCHER FILES DURING DEVELOPMENT :</h2>
<p>
The bundle generation engine build bundle config with  node.js watcher configuration <br>
In developement mode  is very usefull to auto-reload files as controllers , views , routing , translations <br>
without having to reboot the server.
</p>
<code>./src/bundles/hello-bundle/Resources/config/config.yml</code>
<pre>
  #
  #  WATCHERS
  #
  #    Listen to changes, deleting, renaming files and directories of different components
  #
  #    For watch all components
  #
  #      watch:			true            # by default services false !
  #    or
  #      watch:
  #        controllers     : true
  #        config         : true		# only  routing
  #        views          : true
  #        translations   : true
  #        webpack        : true
  #        services       : true

  watch       : true
</pre>

<h2> WEBPACK MODULE BUNDLER :</h2>
<p>
The bundle generation engine build bundle config with a predefined webpack configurations <br>
In this way webpack is very usefull to manage all assets of bundle <br>
In developement mode watch is very usefull to auto-compile webpack module bundle <br>
without having to reboot the server.
</p>

<code>./src/bundles/hello-bundle/Resources/config/webpack.config.js</code>
<pre>
module.exports = webpackMerge({
  context: context,
  target: "web",
  entry       : {
    hello  : [ "./js/hello.js" ]
  },
  output: {
    path: public,
    publicPath: publicPath,
    filename: "./js/[name].js",
    library: "[name]",
    libraryTarget: "umd"
  },
  externals: {},
  resolve: {},
  module: {
    rules: [{
      // BABEL TRANSCODE
      test: new RegExp("\.es6$|\.js$"),
      exclude: new RegExp("node_modules"),
      use: [{
        loader: 'babel-loader',
        options: {
          presets: ['@babel/preset-env']
        }
      }]
    }, {
      // CSS EXTRACT
      test: new RegExp("\.(less|css)$"),
      use: [
        //'css-hot-loader',
        MiniCssExtractPlugin.loader,
        'css-loader',
        'less-loader'
      ]
    }, {
      // SASS
      test: new RegExp(".scss$"),
      use: [{
        loader: 'style-loader'
      }, {
        loader: 'css-loader'
      }, {
        loader: 'sass-loader'
      }]
    }, {
      // FONTS
      test: new RegExp("\.(eot|woff2?|svg|ttf)([\?]?.*)$"),
      use: 'file-loader?name=[name].[ext]&publicPath=/' + bundleName + "/assets/fonts/" +'&outputPath=/fonts/',
    }, {
      // IMAGES
      test: new RegExp("\.(jpg|png|gif)$"),
      use: 'file-loader?name=[name].[ext]&publicPath=/' + bundleName + "/assets/images/" +'&outputPath=/images/'
    }]
  },
  plugins: [
    new MiniCssExtractPlugin({
      filename: "./css/[name].css",
      allChunks: true
    })
  ]
}, config);
</pre>

<code>./src/bundles/hello-bundle/Resources/config/webpack/webpack.dev.config.js</code>
<pre>
  // WEBPACK DEV CONFIGURATION
  const CleanWebpackPlugin = require('clean-webpack-plugin');
  const public = path.resolve(__dirname, "..", "..", "public");
  module.exports = {
    mode: "development",
    devtool: "source-map",
    resolve: {},
    plugins: [
      new CleanWebpackPlugin(['assets'], {
        verbose: kernel.debug,
        root: public
      })
      //new webpack.NamedModulesPlugin(),
      //new webpack.HotModuleReplacementPlugin()
    ]
  };
</pre>


<h2> Start Nodefony to check new Bundle hello:</h2> -d for debug mode
<pre>
$ nodefony -d dev
 or
$ nodefony dev
</pre>

Access to bundle route with URL : http://mydomain.com:5151/hello
