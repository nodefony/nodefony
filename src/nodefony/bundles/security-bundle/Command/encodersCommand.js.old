module.exports = nodefony.registerCommand("encoders", function () {

  const encoders = class encoders extends nodefony.cliKernel {

    constructor(container, command, options) {

      super("encoders", container, container.get("notificationsCenter"), options);

      let cmd = command[0].split(":");
      let args = command[1];
      var realm = null;
      switch (cmd[1]) {
      case "Digest":
        if (args[0] && args[1] && args[2]) {
          var security = this.container.get("security");
          var context = args[0];
          if (!security.securedAreas[context]) {
            this.log("firewall " + context + " not exits", "ERROR");
            this.terminate(1);
            return;
          }
          var user = args[1];
          var passwd = args[2];
          if (args[3]) {
            realm = args[3];
          } else {
            realm = security.securedAreas[context].factory.settings.realm; //  //this.container.getParameters("kernel").system.domain+":"+this.container.getParameters("kernel").system.httpsPort;
          }
          this.log("FIREWALL = " + security.securedAreas[context].name);
          this.log("Authentification = " + security.securedAreas[context].factory.name);
          this.log("REALM = " + security.securedAreas[context].factory.settings.realm);
          this.log("HASH GENERATE = " + security.securedAreas[context].factory.generatePasswd(realm, user, passwd));
        } else {
          this.log(new Error("encoders:MD5 must have login password arguments"), "ERROR");
        }
        break;
      case "bcrypt":
        if (args[0]) {
          let bcrypt = new nodefony.encoders.bcrypt(args[1]);
          let hash = bcrypt.encodePassword(args[0]);
          this.log(`HASH GENERATED : ${hash}`);
        } else {
          throw new Error("no passwordField ");
        }
        break;
      }
      this.terminate(0);
    }
  };

  return {
    name: "encoders",
    commands: {
      //md5: ["encoders:digest firewall login password [realm]", "Generate encoding keys digest MD5 Example : nodefony encoders:Digest secured_area login password"],
      encodeBcrypt: ["encoders:bcrypt 'password' ['salt']", "Generate encoding password Bcrypt Example : nodefony encoders:Bcrypt 'mypassword' 13"],
    },
    cli: encoders
  };
});
