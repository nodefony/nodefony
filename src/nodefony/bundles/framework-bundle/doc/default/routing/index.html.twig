{{trans_default_domain("doc")}}

<div class="page-header">
	<h1><strong>ROUTING</strong> </h1>
	<div class="alert alert-info" role="alert">
		<strong>
		Routing Nodefony manage URL of Application </br>
		</strong>
	</div>
	<p>
		<center>
			<img src="/documentation-bundle/images/routing.png" />
		</center>
	</p>

</div>

<h2 > You can see here :</h2>

<p>
	<ul>
		<li><a href="#location">Routing Location</a></li>
		<li><a href="#autoload">Autoloader</a></li>
		<li><a href="#route">Route</a></li>
		<li>
			<a href="#variables">How the routes are mapped to controller</a>
			<ul>
			<li><a href="#http">http context</a>
			<li><a href="#websocket">websocket context</a>
			</ul>
		</li>
	</ul>
<p>


<h2 name="location" id="location">Routing Location :</h2>
<div class="doc2">
	<p>
		You can find routing configuration in bundle repository under <code>Resources/config/</code> directory.

		<div class="alert alert-warning" role="alert">
			Nodefony <strong>Route Annotations</strong> in files controller is now implemented ! </br>
		</div>

	</p>

	<pre>
$ ll src/nodefony/bundles/documentation-bundle/Resources/config/

total 24
-rwxr-xr-x  1 cci  staff  1060 10 oct 09:37 config.yml
-rwxr-xr-x  1 cci  staff  2036 10 oct 09:37 <strong>routing.js</strong>
-rw-r--r--  1 cci  staff   536 10 oct 09:37 services.js
...
	</pre>
</div>


<div  class="panel panel-info">
	<div class="panel-heading"><strong>Autoloader Routing files</strong>  </div>
	<div class="panel-body ">
		<ul class="nav nav-tabs">
						<li role="presentation" class="active"><a data-target="#js" data-toggle="tab">routing.js</a></li>
						<li role="presentation" ><a data-target="#yml" data-toggle="tab">routing.yml</a></li>
						<li role="presentation" ><a data-target="#annotations" data-toggle="tab">Annotations</a></li>
		</ul>
		<div class="tab-content ">
			<div id="js" class="tab-pane active">
				<h3>File  routing.js  :</h3>
				<div class="doc3 ">
					<p>
						The nodefony Autoloader  load  configuration file in <code>Resources/config</code> directory which match with <strong>'routing.js'</strong> <br>
					</p>
				</div>
				<pre>
module.exports = {
	home:{
		pattern:  "/home",
		defaults: {
			controller: "appBundle:default:index"
		},
		requirements: {
			method: ["GET"]
		}
	},
	myroute: {
		pattern: "/myroute/{page}/{elements}",
		defaults: {
			controller: "appBundle:default:myroute",
			page: 13,
			elements: "myDefaultValue"
		},
		requirements: {
			method: ["GET"],
			page: /^\d\d$/
		}
	}
};
				</pre>
			</div>
			<div id="yml" class="tab-pane">
				<h3>File  routing.yml  :</h3>
				<div class="doc3 ">
				<p>
					The nodefony Autoloader  load  configuration file in <code>Resources/config</code> directory which match with <strong>'routing.yml'</strong> <br>
				</p>
				</div>
					<pre>
documentation:
  pattern:  /documentation
  defaults: {controller: "documentation-bundle:default:index"}
  requirements:
    method: GET

documentation-search:
  pattern:  /documentation/search
  defaults: {controller: "documentation-bundle:default:search"}

documentation-default:
  pattern:  /documentation/{version}
  defaults: {controller: "documentation-bundle:default:index"}

documentation-version:
  pattern:  /documentation/{version}/{bundle}
  defaults: {controller: "documentation-bundle:default:version"}

documentation-section:
  pattern:  /documentation/{version}/{bundle}/{section}
  defaults: {controller: "documentation-bundle:default:version"}

documentation-git-getMostRecentCommit:
  pattern:  /api/git/getMostRecentCommit
  defaults: {controller: "documentation-bundle:git:getMostRecentCommit"}

documentation-git-getStatus:
  pattern:  /api/git/getStatus
  defaults: {controller: "documentation-bundle:git:getStatus"}


documentation-git-getBranch:
  pattern:  /api/git/getCurrentBranch
  defaults: {controller: "documentation-bundle:git:getCurrentBranch"}
					</pre>
			</div>
			<div id="annotations" class="tab-pane">
				<h3>File  annotationController.js  :</h3>
				<div class="doc3 ">
				<p>
					The nodefony Autoloader Parse Annotations in  Controller File'</strong> <br>
				</p>
				</div>
				<pre>
/**
 *    @Route ("/test/annotate")
 *    @Host ("nodefony.com")
 */
module.exports = class annotationController extends nodefony.controller {

  constructor(container, context) {
    super(container, context);
  }

  /**
   *   @Route ("/requirements", name="test-annotation-requirements", defaults={"id" = 5},requirements={"id" = "\d+"})
   *   @Method ({"GET","WEBSOCKET"})
   */
  annotationAction(id) {
    return this.render("testBundle::index.html.twig", {
      id: id
    });
  }

  /**
   *    @Method ({ "POST", "PUT", "DELETE"})
   *    @Route ("/noname/{id}", name="", defaults={"id" = 5},requirements={"id" = "\d+"})
   */
  annotation2Action(id) {
    return this.render("testBundle::index.html.twig", {
      id: id
    });
  }

  /**
   *    @Method ({"GET", "POST"})
   *    @Route ("/block/{id}",
   *      name="test-annotation-block",
   *      defaults={"id" = 5},
   *      requirements={"id" = "\d+"})
   *
   */
  annotation3Action(id) {
    return this.render("testBundle::index.html.twig", {
      id: id
    });
  }
};
				</pre>
			</div>
		</div>
	</div>
</div>

<h3>Starting Log   :</h3>
<div class="doc3 ">

<p>
	When starting all routes are registred in router service :
</p>

	<pre>
Tue Oct 11 2016 13:12:04 DEBUG AUTOLOADER LOAD  : /Users/cci/repository/nodefony/src/nodefony/bundles/documentation-bundle/documentation-bundle.js
Tue Oct 11 2016 13:12:04 DEBUG KERNEL  :  REGISTER BUNDLE : documentation
Tue Oct 11 2016 13:12:04 DEBUG AUTOLOADER LOAD  : /Users/cci/repository/nodefony/src/nodefony/bundles/documentation-bundle/services/webCrawlerService.js
Tue Oct 11 2016 13:12:05 DEBUG SERVICE KERNEL READER  : CONFIG LOAD FILE :/Users/cci/repository/nodefony/src/nodefony/bundles/documentation-bundle/Resources/config/config.yml
Tue Oct 11 2016 13:12:05 <strong> DEBUG SERVICE KERNEL READER  : ROUTER LOAD FILE :/Users/cci/repository/nodefony/src/nodefony/bundles/documentation-bundle/Resources/config/routing.yml</strong>
Tue Oct 11 2016 13:12:05 <strong>DEBUG SERVICE ROUTER  : ADD Route : /documentation   ===> documentation-bundle:default:index</strong>
Tue Oct 11 2016 13:12:05 <strong>DEBUG SERVICE ROUTER  : ADD Route : /documentation/search   ===> documentation-bundle:default:search</strong>
Tue Oct 11 2016 13:12:05 <strong>DEBUG SERVICE ROUTER  : ADD Route : /documentation/{version}   ===> documentation-bundle:default:index</strong>
Tue Oct 11 2016 13:12:05 <strong>DEBUG SERVICE ROUTER  : ADD Route : /documentation/{version}/{bundle}   ===> documentation-bundle:default:version</strong>
Tue Oct 11 2016 13:12:05 <strong>DEBUG SERVICE ROUTER  : ADD Route : /documentation/{version}/{bundle}/{section}   ===> documentation-bundle:default:version</strong>
Tue Oct 11 2016 13:12:05 <strong>DEBUG SERVICE ROUTER  : ADD Route : /api/git/getMostRecentCommit   ===> documentation-bundle:git:getMostRecentCommit</strong>
Tue Oct 11 2016 13:12:05 <strong>DEBUG SERVICE ROUTER  : ADD Route : /api/git/getStatus   ===> documentation-bundle:git:getStatus</strong>
Tue Oct 11 2016 13:12:05 <strong>DEBUG SERVICE ROUTER  : ADD Route : /api/git/getCurrentBranch   ===> documentation-bundle:git:getCurrentBranch</strong>
Tue Oct 11 2016 13:12:05 DEBUG SERVICE KERNEL READER  : SERVICE LOAD FILE :/Users/cci/repository/nodefony/src/nodefony/bundles/documentation-bundle/Resources/config/services.xml
Tue Oct 11 2016 13:12:05 DEBUG SERVICE INJECTION  : START SERVICE webCrawler( container,kernel )
	</pre>
</div>

<h2 name="route" id="route">Route   :</h2>
<div class="doc2">

	<div class="panel panel-default">
  		<!-- Default panel contents -->
  		<div class="panel-heading"> Route Configuration </div>
  		<div class="panel-body">

			<p>

			</p>
  	  		<div class="doc3">
  		  		<div class="alert alert-warning" role="alert">
  			  		<span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
					In  Developement mode When you <strong>edit routing Files </strong> kernel watcher reload config  </br>

  		  		</div>
  	  		</div>
			<p>
	  		Location : <code>Resources/config/routing.yml</code>
			</p>
			<pre>
routeName:
	pattern:	pattern
	defaults:	{controller: "nameBundle:controller:action"}
	prefix: 	test
	requirements:
		method:	GET,DELETE,POST,PUT,WEBSOCKET
	host:		domain.com
	firewalls:
		bypass:     true
			</pre>
			<p>
	  		Location : <code>Resources/config/routing.js</code>
			</p>
			<pre>
routeName:{
	pattern:	"pattern",
	prefix:		"test",
	defaults:	{
		controller: "nameBundle:controller:action"
	},
	requirements:{
		method:	["GET","DELETE","POST","PUT","WEBSOCKET"],
	},
	host:		"domain.com",
	firewalls:{
		bypass:     true
	}
}
			</pre>
			<p>
	  		Location : <code>controller/controllerController.js</code>
			</p>
			<pre>
/**
*    @Route ("/test")
*    @Host ("nodefony.com")
*/
module.exports = class controllerController extends nodefony.controller {
	constructor(container, context) {
		super(container, context);
	}
	/**
	*
	*    @Route ("pattern",
	*      name="routeName",
	*      defaults={"id" = 5},
	*      requirements={"id" = "\d+"})
	*		@Method ({"GET","DELETE","POST","PUT","WEBSOCKET"})
	*
	*/
	actionAction(id) {
		return this.render("appBundle::index.html.twig", {
			id: id
		});
	}
}
			</pre>

		</div>

  		<table class="table">
			<thead>
				<th class="config-parameters">Parameters</th>
				<th>Description</th>
				<th>Data Type</th>
				<th>Example / <span class="badge">Default</span> </th>
			</thead>
	  		<tbody>
			<tr>
		  		<td class="config-parameters">routeName</td>
		  		<td>Route Name (must be unique ) </td>
		  		<td>String</td>
		  		<td>documentation-git-getBranch</td>
	  		</tr>
	  		<tr>
		  		<td class="config-parameters">routeName.pattern</td>
		  		<td>
					URL who match Route </br>
					Dynamics varaible can be use with <strong>{</strong>variable<strong>}</strong>
				</td>
		  		<td>String</td>
		  		<td>
					/api/git/getCurrentBranch<br>
					/documentation/{version}/{bundle}/{section}
				</td>
	  		</tr>
	  		<tr>
		  		<td class="config-parameters">routeName.defaults</td>
		  		<td>Default config route</td>
		  		<td>Object</td>
		  		<td></td>
	  		</tr>
			<tr>
		  		<td class="config-parameters">routeName.defaults.controller</td>
		  		<td>Pattern 'nameBundle:controller:action' </td>
		  		<td>String</td>
		  		<td>"documentation-bundle:git:getCurrentBranch"</td>
	  		</tr>
			<tr>
		  		<td class="config-parameters">routeName.requirement</td>
		  		<td></td>
		  		<td>Object</td>
		  		<td></td>
	  		</tr>

			<tr>
		  		<td class="config-parameters">routeName.requirement.method</td>
		  		<td>
					separator : "," <br>
					Must be  :
					<ul>
						<li>GET</li>
						<li>POST</li>
						<li>PUT</li>
						<li>DELETE</li>
						<li>WEBSOCKET</li>
					</ul>
				</td>
		  		<td>String, Array</td>
		  		<td><span class="badge">All</span></td>
	  		</tr>

			<tr>
		  		<td class="config-parameters">routeName.host</td>
		  		<td>Domain who must match </td>
		  		<td>String</td>
		  		<td>
					nodefony.com
					<span class="badge">All</span>
				</td>
	  		</tr>
			<tr>
		  		<td class="config-parameters">routeName.firewalls</td>
		  		<td>Config parameters for firewall</td>
		  		<td>Object</td>
		  		<td>
				</td>
	  		</tr>
			<tr>
		  		<td class="config-parameters">routeName.firewalls.bypass</td>
		  		<td>Bypass firewall for this route </td>
		  		<td>Boolean</td>
		  		<td>

					<span class="badge">false</span>
				</td>
	  		</tr>

	  		</tbody>
  		</table>

  	</div>

</div>


<h2 name="variables" id="variables">How the routes are mapped to controller  :</h2>
<h3 name="http" id="http">HTTP context  :</h3>
<div class="doc3">

	<p>
		A route is a map from a URL path to a controller : <br>
		<pre>
documentation-default:
  pattern:  /documentation/{version}
  defaults: {controller: "documentation-bundle:default:index"}
		</pre>
		Pattern controller format  : <strong>documentation-bundle:default:index</strong>
		<table border="1" class="table">
			<colgroup>
				<col width="25%">
				<col width="25%">
				<col width="25%">
				<col width="25%">
			</colgroup>
			<thead valign="bottom">
				<tr class="">
					<th class="">Bundle</th>
					<th class="head">Controller Class</th>
					<th class="head">Method Name</th>
					<th class="head">Method Arguments</th>
				</tr>
			</thead>
			<tbody valign="top">
			<tr class=""><td><code class="">documentation-bundle</code></td>
				<td><code class="">defaultController</code></td>
				<td><code class="">indexAction</code></td>
				<td><code class="">indexAction( version )</code></td>
			</tr>
			</tbody>
		</table>
		You can find Variables Route in arguments of action in controller .<br>
		Example : you want to match  URL like /documentation or /documentation/1.0 or 	/documentation/1.0/nodefony
	</p>
	<p>
		<code>documentation-bundle/Resources/config/routing.yml</code> :
	</p>
	<pre>
documentation:
  pattern:  /documentation
  defaults: {controller: "documentation-bundle:default:index"}

documentation-default:
  pattern:  /documentation/<strong>{version}</strong>
  defaults: {controller: "documentation-bundle:default:index"}

documentation-version:
  pattern:  /documentation/<strong>{version}</strong>/<strong>{bundle}</strong>
  defaults: {controller: "documentation-bundle:default:version"}
	</pre>

	<p>
		<code>documentation-bundle/controller/defaultController.js</code> :
	</p>
	<pre>
module.exports =  class defaultController extends nodefony.controller {

	constructor  (container, context){
		super(container, context);
	};

	indexAction (<strong>version</strong>){

		if( ! version ){
			var defaultVersion = this.kernel.settings.version;
		}else{
			var defaultVersion = version ;
		}
		var url = this.<strong>generateUrl</strong>("documentation-version",{
			<strong>bundle:"nodefony",
			version:defaultVersion</strong>
		})
		return this.redirect(url);

	};

	versionAction (<strong>version, bundle</strong>){
		...
	};
};
	</pre>

</div>

<h3 name="websocket" id="websocket">WEBSOCKET context</h3>
<div class="doc3">

	<p>
		A route is a map from a URL path to a controller : <br>
		<code>demo-bundle/Resources/config/routing.yml</code> :
		<pre>
demo-websoket:
  pattern:  /demo/websoket
  defaults: {controller: "demo-bundle:websocket:index"}
  requirements:
    method: GET,WEBSOCKET
		</pre>
		Pattern controller format  : <strong>demo-bundle:websocket:index</strong>
		<table border="1" class="table">
			<colgroup>
				<col width="25%">
				<col width="25%">
				<col width="25%">
				<col width="25%">
			</colgroup>
			<thead valign="bottom">
				<tr class="">
					<th class="">Bundle</th>
					<th class="head">Controller Class</th>
					<th class="head">Method Name</th>
					<th class="head">Method Arguments</th>
				</tr>
			</thead>
			<tbody valign="top">
			<tr class=""><td><code class="">demo-bundle</code></td>
				<td><code class="">websocketController</code></td>
				<td><code class="">indexAction</code></td>
				<td><code class="">indexAction( <strong>message</strong> )</code></td>
			</tr>
			</tbody>
		</table>
		You can find websocket message data (client) in arguments of action in controller .<br>
	</p>
	<p>
		Example : you want to match 2 cases for pattern /demo/websoket <br>

			<ul>
				<li> URL context websocket : <strong>ws(s)://nodefony.com:5151(5152)/demo/websoket </strong> </li>
				<li> URL  context http : <strong>http(s)://nodefony.com:5151(5152)/demo/websoket </strong> </li>
			</ul>

		<code>demo-bundle/controller/websocketController.js</code> :
	</p>
	<pre>
module.exports = class websocketController extends nodefony.controller {

	constructor (container, context){
		super(container, context);
	};

	indexAction (<strong>message</strong>){

		var context = this.getContext();

		switch( <strong>this.getMethod()</strong> ){
			case "GET" :
				return this.render('demo-bundle:Default:websocket.html.twig',{name:"websoket"});
			break;
			case "WEBSOCKET" :
				if (<strong>message</strong>){
					// MESSAGES CLIENT
					this.logger( message.utf8Data , "INFO");
				}else{
					// PREPARE  PUSH MESSAGES SERVER
					// SEND MESSAGES TO CLIENTS
					var i = 0 ;
					var id = setInterval( () => {
						var mess = "I am a  message "+ i +"\n" ;
						context.send(mess);
						this.logger( "SEND TO CLIENT :" + mess , "INFO");
						i++
					}, 1000);

					setTimeout( () => {
						clearInterval(id);
						// close reason , descripton
						context.close(1000, "NODEFONY CONTROLLER CLOSE SOCKET");
						id = null ;
					}, 10000);
					this.context.listen(this, "onClose" , () => {
						if (id){
							clearInterval(id);
						}
					})
				}
			break;
			default :
				throw new Error(" METHOD NOT ALLOWED")
		}
	};
};
	</pre>
</div>
