map $http_upgrade $connection_upgrade {
	default upgrade;
	''      close;
}

# MINIMAL CONFIGURATION HTTP SERVER
server {
  listen {{http_port}};
  server_name {{domain}};

  set  $via  "{{domain}} NGINX $nginx_version";
  if ($http_via) {
    set $via  "$http_via, $via";
  }

	# letsEncrypt webroot
	location ^~ /.well-known/acme-challenge/ {
    # Set correct content type. According to this:
    # https://community.letsencrypt.org/t/using-the-webroot-domain-verification-method/1445/29
    # Current specification requires "text/plain" or no content header at all.
    # It seems that "text/plain" is a safe option.
    default_type "text/plain";
    try_files $uri /$1;

    # This directory must be the same as in /etc/letsencrypt/cli.ini
    # as "webroot-path" parameter. Also don't forget to set "authenticator" parameter
    # there to "webroot".
    # Do NOT use alias, use root! Target directory is located here:
    # /var/www/common/letsencrypt/.well-known/acme-challenge/

    root {{publicPath}};
  }

  location / {
    root {{publicPath}} ;
    proxy_pass http://{{proxy_domain}}:{{proxy_http_port}};
    proxy_pass_header Server;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Port $server_port;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Via  $via;
    proxy_cache_bypass $http_upgrade;
  }

  # STATICS FILES
  location ~ \.(js|css|png|ico|jpg|jpeg|gif|ttf|font|map|woff.?|twig|txt|html|xml|json|mp3|wmv|avi|mpg|mpeg|mp4|webm|swf|flv)$ {
    access_log off;
    root {{publicPath}};
    expires 7d;
		add_header    'Access-Control-Allow-Origin' 'http://{{domain}}' always;
    add_header    'Access-Control-Allow-Methods' 'GET' always;
  }
}

# MINIMAL CONFIGURATION HTTPS SERVER
server {
  listen      {{https_port}} ssl http2;
  server_name {{domain}};

  #add_header X-Frame-Options "SAMEORIGIN";

  ssl_certificate  {{rootdir}}/config/certificates/server/fullchain.pem;
  ssl_certificate_key {{rootdir}}/config/certificates/server/privkey.pem;
  ssl_trusted_certificate {{rootdir}}/config/certificates/server/fullchain.pem;

  set  $via  "{{domain}} NGINX $nginx_version";
  if ($http_via) {
    set $via  "$http_via, $via";
  }

	# letsEncrypt webroot
	location ^~ /.well-known/acme-challenge/ {
    # Set correct content type. According to this:
    # https://community.letsencrypt.org/t/using-the-webroot-domain-verification-method/1445/29
    # Current specification requires "text/plain" or no content header at all.
    # It seems that "text/plain" is a safe option.
    default_type "text/plain";
    try_files $uri /$1;

    # This directory must be the same as in /etc/letsencrypt/cli.ini
    # as "webroot-path" parameter. Also don't forget to set "authenticator" parameter
    # there to "webroot".
    # Do NOT use alias, use root! Target directory is located here:
    # /var/www/common/letsencrypt/.well-known/acme-challenge/

    root {{publicPath}};
  }

  location / {
    root {{publicPath}} ;
    proxy_pass https://{{proxy_domain}}:{{proxy_https_port}};
    proxy_pass_header Server;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Port $server_port ;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header  Via  $via;
    proxy_cache_bypass $http_upgrade;
  }

  # RAPID STATICS FILES
  location ~ \.(js|css|png|ico|jpg|jpeg|gif|ttf|font|map|woff.?|twig|txt|html|xml|json|mp3|wmv|avi|mpg|mpeg|mp4|webm|swf|flv)$ {
    root {{publicPath}};
    expires 7d;
    access_log off;
		add_header    'Access-Control-Allow-Origin' 'https://{{domain}}' always;
    add_header    'Access-Control-Allow-Methods' 'GET' always;
  }

}
