<div class="page-header">
	<h1>WEBPACK </h1>
	<p>
		 Bundle Nodofony Generate a default webpack configuration  in Bundle config directory  <br>

		<h2 > You can see here :</h2>

		<p>
			<ul>
				<li><a href="#Location">Location</a></li>
				<li><a href="#configuration">Configuration</a></li>
			</ul>
		<p>

	<p>
</div>

<h2 name="Location">Location Webpack configurations in File System <span class="badge">Directory</span></h2>
<div class="doc2">
    </br>
Location : <code>src/bundles/helloBundle/Resources/config/webpack</code>
<pre>
$ ls -l ./src/bundles/helloBundle/Resources/config
total 32
-rwxr-xr-x  1 cci  staff  1289 20 nov 11:24 config.yml
-rwxr-xr-x  1 cci  staff   477 20 nov 11:24 routing.js
-rwxr-xr-x  1 cci  staff   728 20 nov 11:24 security.yml
<strong>drwxr-xr-x  4 cci  staff   136 20 nov 11:24 webpack
-rwxr-xr-x  1 cci  staff  2119 20 nov 11:24 webpack.config.js</strong>

helloBundle/config/
├── config.yml
├── routing.js
├── security.yml
├── services.js
├── webpack
│   ├── webpack.dev.config.js
│   └── webpack.prod.config.js
└── webpack.config.js
</pre>
</div>

<h2 name="configuration">Webpack Nodefony configurations </h2>
<div class="doc2">

<div  class="panel panel-info">
    <div class="panel-heading"><strong>Nodefony WebPack Configurations</strong>  </div>
    <div class="alert alert-warning" role="alert">
        Nodefony  WebPack Configuration
        </br>
        <ul>
            <li>
                <strong>public</strong> : "src/bundles/helloBundle/Resources/public",
            </li>
            <li>
                <strong>entry</strong> : "src/bundles/helloBundle/Resources/public/js/hello.js",
            </li>
            <li>
                <strong>output</strong>  : "src/bundles/helloBundle/Resources/public/assets",
            </li>
            <li>
                <strong>publicPath</strong> : "/helloBundle",
            </li>

        </ul>
    </div>
    <div class="panel-body ">
        <ul class="nav nav-tabs">
            <li role="presentation" class="active"><a data-target="#common" data-toggle="tab">webpack.config.js</a></li>
            <li role="presentation" ><a data-target="#dev" data-toggle="tab">webpack.dev.config.js</a></li>
            <li role="presentation" ><a data-target="#prod" data-toggle="tab">webpack.prod.config.js</a></li>
            <li role="presentation" ><a data-target="#index" data-toggle="tab">index.html.twig</a></li>
            <li role="presentation" ><a data-target="#entryjs" data-toggle="tab">Entry hello.js</a></li>
            <li role="presentation" ><a data-target="#entrycss" data-toggle="tab">hello.css</a></li>
        </ul>
        <div class="tab-content ">
            <div id="common" class="tab-pane active">
                </br>
                <p>Location : <code>src/bundles/helloBundle/Resources/config/webpack.config.js</code></p>
                <pre>
const path = require("path");
const public = path.resolve(__dirname, "..", "public");
const bundleName = path.basename(path.resolve(__dirname, "..", ".."));
const ExtractTextPluginCss = require('extract-text-webpack-plugin');
const webpackMerge = require('webpack-merge');
let config = null;
if (kernel.environment === "dev") {
  config = require("./webpack/webpack.dev.config.js");
} else {
  config = require("./webpack/webpack.prod.config.js");
}

module.exports = webpackMerge({
  context: public,
  target: "web",
  entry       : {
    hello  : [ "./js/hello.js" ]
  },
  output: {
    path: public,
    filename: "./assets/js/[name].js",
    library: "[name]",
    libraryTarget: "umd"
  },
  externals: {},
  resolve: {},
  module: {
    rules: [{
      // BABEL TRANSCODE
      test: new RegExp("\.es6$"),
      exclude: new RegExp("node_modules"),
      use: [{
        loader: 'babel-loader',
        options: {
          presets: ['env']
        }
      }]
    }, {
      // CSS EXTRACT
      test: new RegExp("\.css$"),
      use: ExtractTextPluginCss.extract({
        use: 'css-loader'
      })
    }, {
      // SASS
      test: new RegExp(".scss$"),
      use: [{
        loader: 'style-loader'
      }, {
        loader: 'css-loader'
      }, {
        loader: 'sass-loader'
      }]
    }, {
      test: new RegExp("\.less$"),
      use: ExtractTextPluginCss.extract({
        use: [
          "raw-loader",
          {
            loader: 'less-loader',
            options: {
              //strictMath: true,
              //noIeCompat: true
            }
          }
        ]
      })
    }, {
      // FONTS
      test: new RegExp("\.(eot|woff2?|svg|ttf)([\?]?.*)$"),
      use: 'file-loader?name=[name].[ext]&publicPath=/' + bundleName + '&outputPath=/assets/fonts/',
    }, {
      // IMAGES
      test: new RegExp("\.(jpg|png|gif)$"),
      use: 'file-loader?name=[name].[ext]&publicPath=/' + bundleName + '&outputPath=/assets/images/'
    }]
  },
  plugins: [
    new ExtractTextPluginCss({
      filename: "./assets/css/[name].css",
    })
  ]
}, config);
                </pre>
            </div>
            <div id="dev" class="tab-pane">
                </br>
                <p>Location : <code>src/bundles/helloBundle/Resources/config/webpack/webpack.dev.config.js</code></p>
                <pre>
// WEBPACK DEV CONFIGURATION
module.exports = {
  devtool: "source-map",
  resolve: {},
  plugins: []
};
                </pre>
            </div>
						<div id="prod" class="tab-pane">
                </br>
                <p>Location : <code>src/bundles/helloBundle/Resources/config/webpack/webpack.prod.config.js</code></p>
                <pre>
const OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin');
const UglifyJsPlugin = require('uglifyjs-webpack-plugin');

module.exports = {
  watch: false,
  plugins: [
    new OptimizeCssAssetsPlugin({
      cssProcessorOptions: {
        discardComments: {
          removeAll: true
        }
      },
      canPrint: true
    }),
    new UglifyJsPlugin({
      uglifyOptions: {
        warnings: true,
        compress: true
      },
      parallel: true
    })
  ]
};
                </pre>
            </div>
            <div id="index" class="tab-pane">
                </br>
                <p>Location : <code>src/bundles/helloBundle/Resources/views/index.html.twig</code></p>
                <pre>
&#123;% extends '/app/Resources/views/base.html.twig' %&#125;

&#123;% block title %&#125;Welcome &#123;&#123;kernel.name&#125;&#125;! &#123;% endblock %&#125;

&#123;% block stylesheets %&#125;

	&#123;&#123; parent() &#125;&#125;

	&lt!-- WEBPACK BUNDLE --&gt
	&ltlink rel='stylesheet' href='&#123;&#123;CDN("stylesheet")&#125;&#125;/helloBundle/assets/css/hello.css' /&gt

&#123;% endblock %&#125;

&#123;% block body %&#125;
	&ltdiv class='container'&gt
		&ltdiv class='row'&gt
			&ltimg class='displayed' src='&#123;&#123;CDN("image")&#125;&#125;/frameworkBundle/images/nodefony-logo-white.png'&gt
		&lt/div&gt
	&lt/div&gt
	&ltdiv class='container'&gt
		&ltdiv class='row displayed'&gt
			&#123;&#123;readme&#125;&#125;
		&lt/div&gt
	&lt/div&gt
&#123;% endblock %&#125;

&#123;% block javascripts %&#125;

	&#123;&#123; parent() &#125;&#125;

	&lt!-- WEBPACK BUNDLE --&gt
	&ltscript src='&#123;&#123;CDN("javascript")&#125;&#125;/helloBundle/assets/js/hello.js'&gt&lt/script&gt

&#123;% endblock %&#125;
            </pre>
            </div>

            <div id="entryjs" class="tab-pane">
                </br>
                <p>Location : <code>src/bundles/helloBundle/Resources/public/js/hello.js</code></p>
                <pre>
/*
 *
 *	ENTRY POINT WEBPACK DEMO BUNLDE
 *
 *
 *  Add your assets here with require  to an integration in webpack  bundle
 *
 *  require('jquery');
 *  require('../css/mycss.css')
 *
 */
require("../css/hello.css");

module.exports = function (){

	/*
 	 *	Class
	 *
	 *	Namespace hello client side
 	 *
 	 */
	var hello = class hello {

		constructor() {
		}
	};
	return new hello();
}();
                </pre>
            </div>
            <div id="entrycss" class="tab-pane">
                </br>
                <p>Location : <code>src/bundles/helloBundle/Resources/public/css/hello.css</code></p>
                <pre>
IMG.displayed {
    display: block;
    margin-left: auto;
    margin-right: auto
}
                </pre>
            </div>

        </div>
    </div>
</div>
