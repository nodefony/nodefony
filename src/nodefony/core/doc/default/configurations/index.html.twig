{{trans_default_domain("doc")}}


<div class="page-header">
	<h1><strong>NODEFONY CONFIGURATION</strong> </h1>
	<h2>Differents Nodefony configurations Files </h2>
	<div class="doc2" >
		Nodefony manage differents config files that you can find throughout your development.
	</div>

	<h3> Global Configuration  : <code>config.yml</code> </h3>
	<h3> Routing Configuration  : <code>routing.js</code> </h3>
	<h3> Services Configuration  : <code>services.js</code> </h3>
	<h3> Firewall Configuration  : <code>security.yml</code> </h3>
	<h3> Webpack Configuration  :</h3>
	<h3>
		<ul>
			<li><code>webpack.config.js</code> </li>
			<li><code>webpack/webpack.dev.config.js</code> </li>
			<li><code>webpack/webpack.prod.config.js </code></li>
		</ul>
	</h3>

	</br>

	<div class="doc3">

		<div class="alert alert-danger" role="alert">
			<span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
			<span class="sr-only">Error:</span>
			In Developement mode :  Nodefony kernel Don't reload config.yml services.js security.yml files,You must restart nodefony  !!!
		</div>
		<div class="alert alert-info" role="alert">
			<span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
			<span class="sr-only">Error:</span>
			In Developement mode :  routing.js is auto-reloaded is you manage  WATCHERS in config.yml
			</br>
			<pre>
#
#  WATCHERS
#
#    watchers Listen to changes, deletion, renaming of files and directories
#    of different components
#
#    For watch all components
#
#      watch			: true
#    or
#      watch:
#        controller		: true
#        config			: true   	# only  routing
#        views			: true
#        translations   : true
#        webpack		: true
#				 services		: true
#
watch					: true
			</pre>
		</div>

	</div>

	<a href="{{ path('documentation-section',{section:'configurations', version:version, bundle:bundle, queryString:{'subsection':'application'} })}}"> <button type="button" class="btn btn-primary">Aplication Configuration</button></a>
	<a href="{{ path('documentation-section',{section:'configurations', version:version, bundle:bundle, queryString:{'subsection':'framework'} })}}"> <button type="button" class="btn btn-primary">Framework Configuration</button></a>
	<a href="{{ path('documentation-section',{section:'configurations', version:version, bundle:bundle, queryString:{'subsection':'bundle'} })}}"> <button type="button" class="btn btn-primary">Bundles Configuration</button></a>

</div>

	<h2> Global Configuration  : <code>config.yml</code> </h2>

	<div class="doc2">
		<p>
			This file manage the global paramaters of an entity :  <br>

			<ul>
				<li>config.yml in root path manage framework configuration <code>./config/config.yml</code></li>
				<li>config.yml in app bundle manage Application configuration <code>./app/config/config.yml</code> </li>
				<li>config.yml in bundles manage bundle configuration <code>./src/bundles/demoBundle/Ressources/config/config.yml</code></li>
			</ul>
		</p>
		<h4>How to use this parameters : </h4>
		<div class="doc4">
			There are different ways to access these configuration variables
			<ul>
				</li>
				<li>In controller By Kernel Service Container <code> this.getParameters("bundles.App") </code>
				<pre>

module.exports = class defaultController extends nodefony.controller {

	constructor(container, context){
		super(container, context);
	};

	indexAction (version){
		// GET config bundle App
		<strong> let bundleAppSettings = this.getParameters("bundles.App") ;</strong>
		// GET config bundle http
		<strong> let bundleHttpSettings = this.getParameters("bundles.http") ;</strong>

		return this.renderJson(bundleAppSettings);
	};
};
				</pre>
				</li>
				<li>In Kernel you can find  <code> this.settings </code> with framework configuration
				<pre>

indexAction (version){
	// GET kernel service and get config
	<strong>let kernelGlobalSettings = this.kernel.settings ;</strong>

	return this.renderJson(kernelGlobalSettings);
};
				</pre>
				</li>
				<li>In Bundle you can find <code> this.settings </code> with bundle configuration
				<pre>
indexAction (version){
	// GET kernel service , get demo bundle  config
	<strong>let demoBundleGlobalSettings = this.kernel.getBundle("demo").settings ;</strong>

	return this.renderJson(demoBundleGlobalSettings);
};

				</pre>
				<li>Everywhere you can find config variables by Kernel Service Container
					<pre>

module.exports =  class myService extends nodefony.Service {

	constructor (kernel)
		super("myService", kernel.container, kernel.notificationsCenter );
	};

	myFunction (){
		<strong>let kernelSettings = this.kernel.settings ;</strong>
		<strong>let appSettings = this.getParameters("bundles.App") ;</strong>
	};
};

					</pre>
				</li>
			</ul>
		</div>
	</div>

<h2> Routing Configuration  :  <code>routing.js</code>
	<a href="{{ path('documentation-section',{section:'routing', version:'Default', bundle:'framework' })}}"> <button type="button" class="btn btn-primary">Routing</button></a>
</h2>
<h2> Security Configuration  :  <code>security.yml</code>
	<a href="{{ path('documentation-section',{section:'configuration', version:'Default', bundle:'security' })}}"> <button type="button" class="btn btn-primary">Firewall</button></a>
</h2>
<h2> Service Configuration  :  <code>service.js</code>
	<a href="{{ path('documentation-section',{section:'service', version:version, bundle:bundle })}}"> <button type="button" class="btn btn-primary">Services</button></a>
</h2>
<h2> Webpack Configurations  :  <code>webpack/...</code>
	<a href="{{ path('documentation-section',{section:'configurations', version:version, bundle:'nodefony' ,queryString:{'subsection':'webpack' } })}}"> <button type="button" class="btn btn-primary">Webpack</button></a>
</h2>
