<h1>Hello Word<h1>

<h2>Generate hello Bundle :</h2>
Command console to Generate new bundle :    <strong>generate:bundle nameBundle path</strong>
<br/>
<br/>
<pre>
$ <strong>./nodefony generate:bundle helloBundle src/bundles</strong>
   _   _    ___    ____    _____   _____    ___    _   _  __   __
  | \ | |  / _ \  |  _ \  | ____| |  ___|  / _ \  | \ | | \ \ / /
  |  \| | | | | | | | | | |  _|   | |_    | | | | |  \| |  \ V /
  | |\  | | |_| | | |_| | | |___  |  _|   | |_| | | |\  |   | |
  |_| \_|  \___/  |____/  |_____| |_|      \___/  |_| \_|   |_|

  Version : 3.0.0-beta Platform : darwin Process : nodefony PID : 21397

  NODEFONY CONSOLE Cluster : master Environment : prod Debug :false
  __ _    ___   _ __     ___   _ __    __ _  | |_    ___
   / _` |  / _ \ | '_ \   / _ \ | '__|  / _` | | __|  / _ \
  | (_| | |  __/ | | | | |  __/ | |    | (_| | | |_  |  __/
   \__, |  \___| |_| |_|  \___| |_|     \__,_|  \__|  \___|
   |___/

Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : GENERATE bundle : helloBundle LOCATION : /Users/cci/repository/nodefony-core/src/bundles
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create Directory :helloBundle
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create Directory :Command
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create Directory :controller
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create File      :defaultController.js
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create Directory :services
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create Directory :tests
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create File      :helloBundleTest.js
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create Directory :Resources
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create Directory :config
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create File      :config.yml
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create File      :routing.yml
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create Directory :webpack
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create File      :webpack.common.js
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create File      :webpack.dev.config.js
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create File      :webpack.prod.config.js
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create File      :security.yml
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create Directory :public
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create Directory :js
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create File      :hello.js
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create Directory :css
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create File      :hello.css
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create Directory :images
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create Directory :assets
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create Directory :js
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create Directory :css
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create Directory :fonts
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create Directory :images
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create Directory :translations
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create Directory :views
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create File      :index.html.twig
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create Directory :doc
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create Directory :1.0
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create File      :readme.md
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create symbolic link :Default
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create Directory :core
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create Directory :Entity
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create File      :helloBundle.js
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create symbolic link :readme.md
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : Create File      :package.json
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : INSTALL ASSETS LINK IN WEB PUBLIC DIRECTORY  : /Users/cci/repository/nodefony-core/web/
Thu Aug 03 2017 12:03:44 INFO SERVICE CLI KERNEL  : INSTALL LINK IN /web TOTAL SIZE : 2.6 MB
┌─────────┬───────────────────┬────────────────────────────────────────────┬───────────┬────────────────┐
│ BUNDLES │ DESTINATION PATH  │ SOURCE PATH                                │ SIZE      │ ASSETS COMPILE │
├─────────┼───────────────────┼────────────────────────────────────────────┼───────────┼────────────────┤
│ hello   │ ./web/helloBundle │ ./src/bundles/helloBundle/Resources/public │ 483 bytes │ 0 bytes        │
└─────────┴───────────────────┴────────────────────────────────────────────┴───────────┴────────────────┘
Thu Aug 03 2017 12:03:44 INFO CONSOLE   : NODEFONY Kernel Life Cycle Terminate CODE : 0
</pre>

<h2> AUTO REGISTRATION :</h2>
<p>
  The bundle generation engine auto registre generated bundle in framework : <br>
  During the generation of a bundle nodefony uses a temporary yml file <strong>./config/generatedConfig.yml </strong><br>
</p>

<code>./config/generatedConfig.yml</code>
<pre>
system:
  bundles:
  hello: src/bundles/helloBundle
</pre>
<p>
  If the bundle is to be used in a durable way It is preferable to register the bundles in framework config file : <strong>  ./config/config.yml</strong> <br>
</p>
<code>./config/config.yml</code>
<pre>
system:
  bundles:
  demo: src/bundles/helloBundle
</pre>

<h2> Generated VIEW :</h2>
<code>src/bundles/helloBundle/Resources/views/index.html.twig</code>
<pre>
&#123;% extends '/app/Resources/views/base.html.twig' %&#125;

&#123;% block title %&#125;Welcome &#123;&#123;kernel.name&#125;&#125;! &#123;% endblock %&#125;

&#123;% block stylesheets %&#125;

  &#123;&#123; parent() &#125;&#125;

  <strong>&lt;!-- WEBPACK BUNDLE --&gt;
  &lt;link rel='stylesheet' href='&#123;&#123;CDN("stylesheet")&#125;&#125;/helloBundle/assets/css/hello.css' /&gt;</strong>

&#123;% endblock %&#125;

&#123;% block body %&#125;
  &lt;div class='container'&gt;
  &lt;div class='row'&gt;
  &#123;&#123;readme&#125;&#125;
  &lt;/div&gt;
  &lt;/div&gt;
&#123;% endblock %&#125;

&#123;% block javascripts %&#125;

  &#123;&#123; parent() &#125;&#125;

  <strong>&lt;!-- WEBPACK BUNDLE --&gt;
  &lt;script src='&#123;&#123;CDN("javascript")&#125;&#125;/helloBundle/assets/js/hello.js'&gt;&lt;/script&gt;</strong>

&#123;% endblock %&#125;
</pre>
<h2> Generated Controller :</h2>
<code>src/bundles/helloBundle/controller/defaultController.js</code>
<pre>
module.exports = class defaultController extends nodefony.controller {

  constructor (container, context){
    super(container, context);
  }

  /**
  *
  *	@method indexAction
  *
  */
  indexAction (){
    try {
      return this.render("helloBundle::index.html.twig",{name:"default"});
    }catch(e){
      throw e;
    }
  }
};
</pre>

<h2> WATCHER FILES DURING DEVELOPMENT :</h2>
<p>
The bundle generation engine build bundle config with  node.js watcher configuration <br>
In developement mode  is very usefull to auto-reload files as controllers , views , routing , translations <br>
without having to reboot the server.
</p>
<code>./src/bundles/helloBundle/Resources/config/config.yml</code>
<pre>
  #
  #  WATCHERS
  #
  #    watchers Listen to changes, deletion, renaming of files and directories
  #    of different components
  #
  #    For watch all components
  #
  #      watch:			true       # services false by default
  #    or
  #      watch:
  #        controller     : true
  #        config         : true		# only  routing
  #        views          : true
  #        translations   : true
  #        webpack        : true
  #        services       : true

  watch       : true
</pre>

<h2> WEBPACK MODULE BUNDLER :</h2>
<p>
The bundle generation engine build bundle config with a predefined webpack configurations <br>
In this way webpack is very usefull to manage all assets of bundle <br>
In developement mode watch  is very usefull to auto-compile webpack module bundle <br>
without having to reboot the server.
</p>

<code>./src/bundles/helloBundle/Resources/config/webpack.config.js</code>
<pre>
  const path = require("path");
  const public = path.resolve(__dirname, "..", "public");
  const bundleName = path.basename(path.resolve(__dirname, "..", ".."));
  const ExtractTextPluginCss = require('extract-text-webpack-plugin');
  const webpackMerge = require('webpack-merge');
  let config = null;
  if (kernel.environment === "dev") {
    config = require("./webpack/webpack.dev.config.js");
  } else {
    config = require("./webpack/webpack.prod.config.js");
  }

  module.exports = webpackMerge({
    context: public,
    target: "web",
    entry       : {
      hello  : [ "./js/hello.js" ]
    },
    output: {
      path: public,
      filename: "./assets/js/[name].js",
      library: "[name]",
      libraryTarget: "umd"
    },
    externals: {},
    resolve: {},
    module: {
      rules: [{
        // BABEL TRANSCODE
        test: new RegExp("\.es6$"),
        exclude: new RegExp("node_modules"),
        use: [{
          loader: 'babel-loader',
          options: {
            presets: ['env']
          }
        }]
      }, {
        // CSS EXTRACT
        test: new RegExp("\.css$"),
        use: ExtractTextPluginCss.extract({
          use: 'css-loader'
        })
      }, {
        // SASS
        test: new RegExp(".scss$"),
        use: [{
          loader: 'style-loader'
        }, {
          loader: 'css-loader'
        }, {
          loader: 'sass-loader'
        }]
      }, {
        test: new RegExp("\.less$"),
        use: ExtractTextPluginCss.extract({
          use: [
            "raw-loader",
            {
              loader: 'less-loader',
              options: {
                //strictMath: true,
                //noIeCompat: true
              }
            }
          ]
        })
      }, {
        // FONTS
        test: new RegExp("\.(eot|woff2?|svg|ttf)([\?]?.*)$"),
        use: 'file-loader?name=[name].[ext]&publicPath=/' + bundleName + '&outputPath=/assets/fonts/',
      }, {
        // IMAGES
        test: new RegExp("\.(jpg|png|gif)$"),
        use: 'file-loader?name=[name].[ext]&publicPath=/' + bundleName + '&outputPath=/assets/images/'
      }]
    },
    plugins: [
      new ExtractTextPluginCss({
        filename: "./assets/css/[name].css",
      })
    ]
  }, config);
</pre>

<code>./src/bundles/helloBundle/Resources/config/webpack/webpack.dev.config.js</code>
<pre>
  module.exports = {
    devtool: "source-map",
    resolve: {},
    plugins: []
  };
</pre>


<h2> Start Nodefony to check new Bundle hello:</h2> -d for debug mode
<pre>
$ ./nodefony -d dev
 or
$ ./nodefony dev
</pre>

Access to bundle route with URL : http://nodefony.com:5151/hello
