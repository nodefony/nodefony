#!/usr/bin/env node
 //--inspect-brk
"use strict;";
const path = require("path");
const fs = require("fs");

const nodefony = function () {
  let error = [];
  try {
    fs.lstatSync(path.resolve(".core"));
    return require(path.resolve("src", "nodefony"));
  } catch (e) {
    if (e && e.name && e.name === "nodefonyError") {
      throw e;
    }
    error.push(e);
  }
  try {
    let res = require(path.resolve(process.cwd(), "node_modules", "nodefony"));
    let ret = null;
    try {
      ret = require("nodefony");
    } catch (e) {
      if (e && e.name && e.name === "nodefonyError") {
        throw e;
      }
      error.push(e);
    }
    if (ret && (ret.version !== res.version)) {
      res.warning = `Module nodefony global = ${ret.version}\nModule nodefony local = ${res.version}`;
    }
    return res;
  } catch (e) {
    if (e && e.name && e.name === "nodefonyError") {
      throw e;
    }
    error.push(e);
  }
  try {
    return require("nodefony");
  } catch (e) {
    if (e && e.name && e.name === "nodefonyError") {
      throw e;
    }
    error.push(e);
  }
  try {
    return require(path.resolve(__dirname, ".."));
  } catch (e) {
    if (e && e.name && e.name === "nodefonyError") {
      throw e;
    }
    error.push(e);
  }
  try {
    const globalPath = path.resolve(process.argv[1], '..', '..', 'lib', 'node_modules');
    return require(path.resolve(globalPath, "nodefony"));
  } catch (e) {
    error.push(e);
    console.trace(error);
    throw new Error("Module nodefony not found try npm -g install nodefony");
  }
}();

const isElectronDev = function () {
  return process.mainModule.filename.indexOf('app.asar') === -1;
};

if (nodefony.isElectron) {
  if (!isElectronDev()) {
    process.chdir(nodefony.isElectron.app.getAppPath());
  }
  nodefony.isElectron.app.on('ready', () => {
    try {
      return new nodefony.cliStart();
    } catch (e) {
      throw e;
    }
  });
  module.exports = nodefony.isElectron;
} else {
  try {
    module.exports = new nodefony.cliStart();
  } catch (e) {
    throw e;
  }
}