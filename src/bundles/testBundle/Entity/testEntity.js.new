const Sequelize = require("sequelize");

module.export = class test extends nodefony.Entity {


  constructor(bundle) {
    /*
     *  orm
     *  connection
     */
    super("sequelize", "nodefony");
  }

  registerModel(db, orm) {
    let model = db.define("session", {
      session_id: {
        type: Sequelize.STRING(126).BINARY,
        primaryKey: true
      },
      context: {
        type: Sequelize.STRING(126).BINARY,
        defaultValue: "default",
        primaryKey: true
      },
      Attributes: {
        type: Sequelize.TEXT,
        set: function (value) {
          return this.setDataValue('Attributes', JSON.stringify(value));
        },
        get: function (value) {
          var val = this.getDataValue(value);
          return JSON.parse(val);
        }
      },
      flashBag: {
        type: Sequelize.TEXT,
        set: function (value) {
          return this.setDataValue('flashBag', JSON.stringify(value));
        },
        get: function (value) {
          let val = this.getDataValue(value);
          return JSON.parse(val);
        }
      },
      metaBag: {
        type: Sequelize.TEXT,
        set: function (value) {
          return this.setDataValue('metaBag', JSON.stringify(value));
        },
        get: function (value) {
          let val = this.getDataValue(value);
          return JSON.parse(val);
        }
      },
      createdAt: {
        type: Sequelize.DATE,
        defaultValue: Sequelize.NOW
      },
      updatedAt: {
        type: Sequelize.DATE,
        defaultValue: Sequelize.NOW
      }
    }, {
      logging: false
    });

    model.fetchAll = function (callback) {
      return this.findAll().then(function (result) {
        return callback(null, result);
      }).catch(function (error) {
        if (error) {
          return callback(error, null);
        }
      });
    };
    return model;
  }
};