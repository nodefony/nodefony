#
#
#	ROUTING BUNDLE testBundle 
#
#===============================================================================
#
#  Copyright Â© 2016/2017         | 
#
# ===============================================================================
#
#        GENERATE BY nodefony BUILDER YAML FILE 
#
# This file is YAML  FILE
# ---
# YAML: YAML Ain't Markup Language
#
# What It Is: YAML is a human friendly data serialization
#   standard for all programming languages.
#
# YAML Resources:
#   YAML 1.2 (3rd Edition): http://yaml.org/spec/1.2/spec.html
#   YAML 1.1 (2nd Edition): http://yaml.org/spec/1.1/
#   YAML 1.0 (1st Edition): http://yaml.org/spec/1.0/
#   YAML Trac Wiki: http://trac.yaml.org/
#   YAML Mailing List: yaml-core@lists.sourceforge.net
#   YAML IRC Channel: "#yaml on irc.freenode.net"
#   YAML Cookbook (Ruby): http://yaml4r.sourceforge.net/cookbook/ (local)
#   YAML Reference Parser: http://yaml.org/ypaste/



########## nodefony ROUTING  testBundle  ############

test: 
  pattern:  /test
  defaults: {"controller": "testBundle:default:index"}

json: 
  pattern:  /json
  defaults: {"controller": "testBundle:default:json"}


### WEBSOCKET ###
websoket: 
  pattern:  /websoket
  defaults: {"controller": "testBundle:default:websoket"}
  requirements:
    method:
      - WEBSOCKET


## UNIT TEST

myroute:
  pattern:      /myroute
  defaults:     {"controller": "testBundle:test:myroute","page":51,"elements":"defaultValue"}
  requirements:
    method:     GET
    page:       "^\\d\\d$"

myroute2:
  pattern:      /myroute/{page}/{elements}
  defaults:     {"controller": "testBundle:test:myroute","page":13,"elements":"myRouteDefaultValue"}
  requirements:
    method:     GET
    page:       "^\\d\\d$"

response-status:
  pattern:      /test/unit/response/status/{st}
  defaults:     {"controller": "testBundle:test:responseStatus"}
  requirements:
    method:     GET

response-message:
  pattern:      /test/unit/response/status/{st}/{message}
  defaults:     {"controller": "testBundle:test:responseMessage","message":bar}
  requirements:
    method:     GET

response-query:
  pattern:      /test/unit/response/query/{myVariable}/{myVariable2}
  defaults:     {"controller": "testBundle:test:responseQuery","myVariable":foo,"myVariable2":bar}
  requirements:
    method:     GET

redirect-301:
  pattern:      /test/unit/redirect/{status}
  defaults:     {"controller": "testBundle:controllerTest:redirect","status":302}
  requirements:
    method:
      - GET
      - POST

request-data:
  pattern:      /test/unit/request
  defaults:     {"controller": "testBundle:controllerTest:request"}
  requirements:
    method:
      - GET
      - POST

request-promise:
  pattern:      /test/unit/promise/{action}
  defaults:     {"controller": "testBundle:controllerTest:promise", "action":"promise"}
  requirements:
    method:
      - GET
      - POST

request-exception:
  pattern:      /test/unit/exception/{action}
  defaults:     {"controller": "testBundle:controllerTest:exception", "action":500}
  requirements:
    method:
      - GET
      - POST

twig-render:
  pattern:      /test/unit/twig/render
  defaults:     {"controller": "testBundle:twig:render"}
  requirements:
    method:
      - GET
      - POST

twig-extend:
  pattern:      /test/unit/twig/extend
  defaults:     {"controller": "testBundle:twig:extend"}
  requirements:
    method:
      - GET
      - POST

twig-websocket:
  pattern:      /test/unit/twig/websocket
  defaults:     {"controller": "testBundle:twig:websocket"}
  requirements:
    method:
      - GET
      - POST
      - WEBSOCKET

session:
  pattern:      /test/unit/session/{type}
  defaults:     {"controller": "testBundle:session:session" , "type":"callback"}
  requirements:
    method:
      - GET
      - POST
      - WEBSOCKET

subrequest:
  pattern:      /test/unit/subrequest
  defaults:     {"controller": "testBundle:subRequest:index" }
  requirements:
    method:     GET
