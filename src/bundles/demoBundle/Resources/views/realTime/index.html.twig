{% extends "../layouts/layout.html.twig" %}


{{trans_default_domain("ssed")}}


{% block stylesheets %}

	{{parent()}}
	<style type="text/css">

		/* { font-family: 'Source Code Pro', sans-serif !important;  }
		body { background: #000; padding: 40px;color:white }*/
		.terminal { color: #0B0; }
		#terminal-container {
			padding: 10px;
			border: thin solid #F7F7F7;
		}
		
	</style>

{% endblock %}



{% block title %} {{title| trans}} {% endblock %}

{% block body %}
	{{parent()}}	
	
	<div class="container">

      		<div class="row" style="margin-top: 50px;">
            	<div class="col-md-6">
                    	<div class="btn-group" id="services-buttons" data-toggle="buttons"></div>  
				<canvas class="can" id="can-1" width="1200" height="257"></canvas>
            	</div>
            	<div class="col-md-6" id="l">
                	<button type="button" class="btn btn-primary pull-right" data-toggle="button" id="start">Start</button>
			<div class="row" style="margin-top: 20px">
				<div class="col-md-12">
					<div id="logs"></div>
				</div>
			</div>

            	</div>
        	</div>

		<div class="row" style="margin-top: 20px; display: none;" id="terminal-container">
            	<div class="col-md-12">
			<p class="terminal" id="messages" style="height: 300px; overflow-y: auto;"></p>
	    	</div>
		</div>
	</div>

{% endblock %}

{% block javascripts %}

	{{parent()}}

	
	<script type="text/javascript" src="/demoBundle/js/smoothie.js"></script>

	<script type="text/javascript">
		
		var createButton = function(name, realtime){
			if (name === "monitoring") return
			var button = $(document.createElement("input"));
			var label = $(document.createElement("label"));
			button.addClass("btn btn-small btn-inverse");
			label.addClass("btn btn-primary");
			button.text(name);
			button.attr("id","service_"+name);
			button.attr("type","checkbox");
			$("#services-buttons").append( label.get(0));
			label.append( button.get(0));
			label.append( document.createTextNode(name) )
			button.bind("change", function(event){
				var target = $(event.target);
				var name = target.text();
				if (name in realtime.subscribedService){
					realtime.unSubscribe(name);
				}else{
					realtime.subscribe(name, JSON.stringify({
						method:"start",
						params:[5000]
					}));
				}
			})
		};


		var createButtonClose = function( realtime ){
			var button = $('#start');
			button.bind("click", function() {
				if (realtime.connected) {
					realtime.stop();
					button.text("Start");
				} else {
					realtime.start();
					button.text("Stop");
				}
			});
			return button;
		};

		var log = function(type , message){
			var format = "";
			switch (type){
				case "ERROR":
					format = "<span class='label label-danger'>"+type+"</span>"  
				break;
				case "SUCCESS":
					format = "<span class='label label-success'>"+type+"</span>"  
				break;
				case "WARNING":
					format = "<span class='label label-warning'>"+type+"</span>"  
				break;
				case "INFO":
					format = "<span class='label label-info'>"+type+"</span>"  
				break;
				default :
					format = "<span class='label label-default'>"+type+"</span>"  
				break;
			
			}

			return $("#logs").append( "<p>"+format+" "+message+"</p>" ) ;
		
		}



		$('.can').attr('width', $('#l').width());
        
		var chart = new SmoothieChart({
			millisPerPixel:100,
			//maxValueScale:0.1,
			//scaleSmoothing:0.9,
			maxValue:100,
			minValue:0,
			//timestampFormatter:SmoothieChart.timeFormatter,
			grid: {
				verticalSections:6,
				//millisPerLine: 250
			}
		});


		var line1 = new TimeSeries();
                chart.addTimeSeries(line1, { strokeStyle:'rgb(255, 0, 0)', fillStyle:'rgba(255, 0, 0, 0.4)', lineWidth:3 });


		var line2 = new TimeSeries();
		chart.addTimeSeries(line2, { strokeStyle:'rgb(0, 0, 255)', fillStyle:'rgba(0, 0, 255, 0.4)', lineWidth:3 });


		$(document).ready(function(){
			// nodejs server
			var server = "/realtime"
			
			var sseClient = new stage.realtime(server ,{
				// fire when 401 http code
				onUnauthorized:function(authenticate, realtime){
					//authenticate.register("admin", "admin");
				},
				// fire when authetification success or not authenticate
				onAuthorized:function(authenticate, realtime){
					$("#logs" ).empty();
					log("SUCCESS", "Welcome REALTIME Authorization OK");
				},
				// fire when error
				onError:function(obj, status ,message){
					log("ERROR", message);
				},
				// fire when message service event
				onMessage:function(service, message){
					//console.log(message)
					if (service === "random"){
						try {
							var res = JSON.parse(message);
							//$("#messages").append("<p>"+message+"</p>")
							if (line1)
								line1.append(new Date().getTime(), res.result);
						}catch(e){
							
						}
					}
					if (service === "dmsg"){
						$("#messages").append("<p>"+message+"</p>")
						//if (line2)
							//line2.append(new Date().getTime(), message);
					}
				},
				// fire when socket connection ready 
				onHandshake:function(socket){
					log("SUCCESS", "HANSHAKE OK");
				},
				// fire when service is ready
				onConnect:function(message, realtime){
					log("SUCCESS", "CONNECT OK");
					for (var serv in realtime.services){
						createButton(serv, realtime)
					}
					chart.streamTo(document.getElementById("can-1"), 5000);
				},

				onDisconnect:function(){
					log("INFO", "onDisconnect");
				},
				// fire when socket close
				onClose:function(){
					log("WARNING", "onCLose");
					$("#services-buttons").empty();
				},
				// fire when service subcribed 
				onSubscribe:function(service, message, realtime){
					log("INFO", "SUBSCRIBE service : " + service);
					if (service === "dmsg"){
						$("#terminal-container").show();	
						//$( "#service_dmsg" ).trigger( "change" );
					}
					if (service === "random"){
						//$( "#service_random" ).trigger( "change" );
					}
				},
				// fire when service unsubcribed 
				onUnsubscribe:function(service, message){
					log("INFO", "UNSUBSCRIBE service : " + service);
					if (service === "dmsg"){
						$("#messages").empty();
						$("#terminal-container").hide();
					}
				}
			});	

			//sseClient.start();
			var button = createButtonClose(sseClient);

			
			//console.log(sseClient);

			//setTimeout(function(){
				//sseClient.stop();		
				/*sseClient.subscribe("random",JSON.stringify({
					method:"start",
					params:[5000]
				}));*/
				//setTimeout(function(){
					//sseClient.stop();		
					//sseClient.unSubscribe("random");
					//sseClient.start();
					/*console.log( sseClient.sendMessage("random", JSON.stringify({
						method:"stop",
						params:[]
					})) )*/
				//},10000);
			//}, 15000)

		});
				

		


	</script>

{% endblock %}

