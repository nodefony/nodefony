#!/usr/bin/env node
const pm2 = require('pm2');
const Table = require('cli-table');
const yaml = require('js-yaml');
const fs = require("fs");
const path = require('path');
const instances =  require('os').cpus().length ;

require('asciify')("      NODEFONY", {font:'standard'}, function(err, res){
	console.log('\n');
	console.log('\033[31m'+res+'\033[0m');

	var head = [
		"NAME",
		"EXEC MODE",
		"INSTANCES",
		"MAX MEMORY RESTART",
		"AUTO RESTART",
		"MAX RESTART",
		"ERROR FILE LOG",
		"OUTPUT FILE LOG"
	];
	var table = new Table({
		head: head,
		colWidths: [20, 15, 15, 20, 15, 15, 30, 30]
	});

	
	var nodefonyConfig = null ; 
	try {
		var conf = path.resolve(".", "config", "config.yml");
		var exist = fs.existsSync( conf );
		if (exist){
			nodefonyConfig =  yaml.load( fs.readFileSync(conf, 'utf8' ) ); 
		}
	}catch(e){
		console.trace(e)
		throw e ;
	}

	var config = null ;
	try {
		var conf = path.resolve(".", "config", "pm2.json");
		var exist = fs.existsSync(conf);
		if (exist){
			config = require(conf); 
		}
	}catch(e){
		console.trace(e)
		throw e ;
	}

	if ( ! config ){
		config = nodefonyConfig.system.PM2 ;		
	}
	config.script = "nodefony" ;
	config.env =  {
		NODE_ENV : "production",
		MODE_START : "PM2"
	};
	config.cwd = process.cwd(); 

	if ( ! config.instances ){
		config.instances = instances ;
	}

	pm2.connect(true, function() {
  		pm2.start(config, (err) =>  {
    			if (err){
 			       	console.trace('Error while launching applications', err.stack || err);
				throw err ;
			}
			table.push([
				config.name,
				config.exec_mode,
				config.instances,
				config.max_memory_restart,
				config.autorestart,
				config.max_restarts,
				config.error_file.replace(config.cwd,"."),
				config.out_file.replace(config.cwd,".")	
			]);
			console.log(table.toString());
    			// Display logs in standard output 
    			pm2.launchBus((err, bus) =>  {
				//bus.on('process:msg',function(packet) {
				//	console.log( packet.process )
				//	console.log( packet )
      				//});
      				//bus.on('log:out', function(packet) {
       				//	console.log( packet.data );
      				//});
      				//bus.on('log:err', function(packet) {
        			//	console.error('[App:%s][Err] %s', packet.process.name, packet.data);
      				//});
    			});
  		});
	});
});


