#!/usr/bin/env node
const pm2 = require('pm2');
const Table = require('cli-table');
const yaml = require('js-yaml');
const fs = require("fs");
const path = require('path');
const instances =  require('os').cpus().length ;

require('asciify')("      NODEFONY", {font:'standard'}, function(err, res){
	console.log('\n');
	console.log('\033[31m'+res+'\033[0m');

	var links = path.resolve( ".", "tmp", "assestLink" ) ;
	if ( fs.existsSync( links) ){
		console.log("DELETE TMP :" + links)
		fs.rmdirSync( links );	
	}

	var webpack = path.resolve( ".", "tmp", "webpack" ) ;
	if ( fs.existsSync( webpack) ){
		console.log("DELETE TMP :" + webpack)
		fs.rmdirSync( webpack );	
	}

	var nodefonyConfig = null ; 
	try {
		var conf = path.resolve(".", "config", "config.yml");
		var exist = fs.existsSync( conf );
		if (exist){
			nodefonyConfig =  yaml.load( fs.readFileSync(conf, 'utf8' ) ); 
		}
	}catch(e){
		console.trace(e)
		throw e ;
	}

	var projectName = null ;
	try {
		var app = path.resolve( "app", "config", "config.yml") ;
		var exist = fs.existsSync( app );
		if (exist){
			projectName = yaml.load( fs.readFileSync( app, 'utf8' ) ).App.projectName; 
		}
	}catch(e){
		console.trace(e)
		throw e ;
	}

	var config = null ;
	try {
		var conf = path.resolve(".", "config", "pm2.json");
		var exist = fs.existsSync(conf);
		if (exist){
			config = require(conf); 
		}
	}catch(e){
		console.trace(e)
		throw e ;
	}

	if ( ! config ){
		config = nodefonyConfig.system.PM2 ;		
	}
	config.script = "nodefony" ;
	config.env =  {
		NODE_ENV : "production",
		MODE_START : "PM2"
	};
	config.cwd = process.cwd(); 
	config.name = projectName || "nodefony" ; 

	if ( ! config.instances ){
		config.instances = instances ;
	}
	pm2.connect(true, function() {
  		pm2.start(config, (err, apps) =>  {
    			if (err){
 			       	console.trace('Error while launching applications', err.stack || err);
				throw err ;
			}
			try { 
				var table = new Table({
					head: [
						"EXEC MODE",
						"INSTANCES",
						"MAX MEMORY RESTART",
						"AUTO RESTART",
						"MAX RESTART",
						"ERROR FILE LOG",
						"OUTPUT FILE LOG"
					],
					colWidths: [ 15, 15, 20, 15, 15, 30, 30]
				});
				table.push([
					config.exec_mode,
					config.instances,
					config.max_memory_restart,
					config.autorestart,
					config.max_restarts,
					config.error_file.replace(config.cwd,"."),
					config.out_file.replace(config.cwd,".")	
				]);
				console.log(table.toString());
				table = null ;
				table = new Table({
					head: [
						"APP NAME",
						"ID",
						"STATUS",
						"RESTART"
					],
					colWidths: [ 30, 15, 20, 15 ]
				});
				apps.forEach ( (ele) =>{
					//console.log(ele.pm2_env)
					table.push([
						ele.pm2_env.name,
						ele.pm2_env.pm_id,
						ele.pm2_env.status,
						ele.pm2_env.restart_time
					]);
				} );
				console.log( table.toString() );
				console.log(" To see all logs use the command  make logs ")
				console.log(" Or use PM2  pm2 --lines 1000 logs ")
			}catch(e){
				//console.error(e);	
			}
			process.exit(0);
    			// Display logs in standard output 
    			/*
			pm2.launchBus((err, bus) =>  {
				bus.on('process:msg',function(packet) {
					console.log( packet.process )
					console.log( packet )
      				});
      				bus.on('log:out', function(packet) {
       					console.log( packet.data );
      				});
      				bus.on('log:err', function(packet) {
        				console.error('[App:%s][Err] %s', packet.process.name, packet.data);
      				});
    			});
			*/
  		});
	});
});
